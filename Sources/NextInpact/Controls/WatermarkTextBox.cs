//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : WatermarkTextBox.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle WatermarkTextBox
// Créé le       : 22/01/2015
// Modifié le    : 22/01/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Controls;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextInpact.Controls"
//*******************************************************************************************************************************
namespace NextInpact.Controls
	{

	//  #   #   ###   ####   #   #         #####  #   #  #####         ####    ###   #   #
	//  ## ##  #   #  #   #  #  #            #     # #     #           #   #  #   #   # # 
	//  # # #  #####  ####   ###    #####    #      #      #    #####  ####   #   #    #  
	//  #   #  #   #  #   #  #  #            #     # #     #           #   #  #   #   # # 
	//  #   #  #   #  #   #  #   #           #    #   #    #           ####    ###   #   #

	//***************************************************************************************************************************
	// Classe WatermarkTextBox
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit un TextBox avec texte en fond.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	[TemplateVisualState ( Name = "WatermarkFocused"      , GroupName = "WatermarkTextStates")]
	[TemplateVisualState ( Name = "WatermarkTextVisible"  , GroupName = "WatermarkTextStates")]
	[TemplateVisualState ( Name = "WatermarkTextCollapsed", GroupName = "WatermarkTextStates")]
	//---------------------------------------------------------------------------------------------------------------------------
	public class WatermarkTextBox : TextBox
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty RootBackgroundProperty;
		public static readonly DependencyProperty RootBorderBrushProperty;
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty AlphaNumericProperty;
		public static readonly DependencyProperty WatermarkBackgroundProperty;
		public static readonly DependencyProperty WatermarkBorderBrushProperty;
		public static readonly DependencyProperty WatermarkForegroundProperty;
		public static readonly DependencyProperty WatermarkTextProperty;
		//-----------------------------------------------------------------------------------------------------------------------
		private                bool               IsFocused = false;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>WatermarkTextBox</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static WatermarkTextBox ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			RootBackgroundProperty       = DependencyProperty.Register ( "RootBackground"      , 
				typeof (Brush ), typeof (WatermarkTextBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.White ) ) );
			RootBorderBrushProperty      = DependencyProperty.Register ( "RootBorderBrush"     , 
				typeof (Brush ), typeof (WatermarkTextBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.White ) ) );
			//-------------------------------------------------------------------------------------------------------------------
			AlphaNumericProperty         = DependencyProperty.Register ( "AlphaNumeric"        , 
				typeof (bool  ), typeof (WatermarkTextBox), new PropertyMetadata 
					( false                                                        ) );
			WatermarkBackgroundProperty  = DependencyProperty.Register ( "WatermarkBackground" , 
				typeof (Brush ), typeof (WatermarkTextBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.Black ), OnBrushPropertyChanged ) );
			WatermarkBorderBrushProperty = DependencyProperty.Register ( "WatermarkBorderBrush", 
				typeof (Brush ), typeof (WatermarkTextBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.Black ), OnBrushPropertyChanged ) );
			WatermarkForegroundProperty  = DependencyProperty.Register ( "WatermarkForeground" , 
				typeof (Brush ), typeof (WatermarkTextBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.Black ), OnBrushPropertyChanged ) );
			WatermarkTextProperty        = DependencyProperty.Register ( "WatermarkText"       , 
				typeof (string), typeof (WatermarkTextBox), new PropertyMetadata 
					( null                                                         ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>WatermarkTextBox</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public WatermarkTextBox ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.DefaultStyleKey = typeof (WatermarkTextBox);
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque qu'une des propriétés est modifiée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>DependencyPropertyChangedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void OnBrushPropertyChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			(Sender as WatermarkTextBox).ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le style selon l'état du composant.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ApplyVisualState ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.IsFocused && string.IsNullOrEmpty ( this.Text ) )
				{
				VisualStateManager.GoToState ( this, "WatermarkTextVisible"  , true );

				this.SetValue ( RootBackgroundProperty , this.GetValue ( WatermarkBackgroundProperty  ) );
				this.SetValue ( RootBorderBrushProperty, this.GetValue ( WatermarkBorderBrushProperty ) );
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! this.IsFocused )
				{
				VisualStateManager.GoToState ( this, "WatermarkTextCollapsed", true );

				this.SetValue ( RootBackgroundProperty , this.GetValue ( WatermarkBackgroundProperty  ) );
				this.SetValue ( RootBorderBrushProperty, this.GetValue ( WatermarkBorderBrushProperty ) );
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				VisualStateManager.GoToState ( this, "WatermarkTextCollapsed", true );

				this.SetValue ( RootBackgroundProperty , this.GetValue ( BackgroundProperty           ) );
				this.SetValue ( RootBorderBrushProperty, this.GetValue ( BorderBrushProperty          ) );
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// S'assure de l'application du template actuel.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public override void OnApplyTemplate ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnApplyTemplate ();

			this.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque le contrôle reçoit le focus.
		/// </summary>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnGotFocus ( RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnGotFocus ( Args );

			this.IsFocused = true;

			this.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appelée lorsque l'événement KeyDown se produit.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnKeyDown ( System.Windows.Input.KeyEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.AlphaNumeric )
				{
				try
					{
					if ( ! char.IsLetterOrDigit ( (char)Args.PlatformKeyCode ) )
						{
						Args.Handled = true;
						}
					}
				catch {}
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			base.OnKeyDown ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque le contrôle perd le focus.
		/// </summary>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnLostFocus ( RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnLostFocus ( Args );

			this.IsFocused = false;

			this.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si on limite la saisie au chiffres et aux lettres.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool AlphaNumeric
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (bool)this.GetValue ( AlphaNumericProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( AlphaNumericProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le texte du contrôle.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public new string Text
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return base.Text; }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.Text = value; this.ApplyVisualState (); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la couleur de fond du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Brush WatermarkBackground
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkBackgroundProperty ) as Brush; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkBackgroundProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la couleur de la bordure du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Brush WatermarkBorderBrush
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkBorderBrushProperty ) as Brush; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkBorderBrushProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la couleur de police du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Brush WatermarkForeground
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkForegroundProperty ) as Brush; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkForegroundProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le texte du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string WatermarkText
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkTextProperty ) as string; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkTextProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextInpact.Controls"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
