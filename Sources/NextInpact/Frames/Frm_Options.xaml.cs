//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Frm_Options.xaml.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'écran Options
// Créé le       : 12/05/2015
// Modifié le    : 21/05/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Net;
using System.Windows;
using System.Xml.Linq;
using System.MarketPlace;
using System.Globalization;
using System.Windows.Media;
using System.Windows.Controls;
using System.Windows.Threading;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Windows.Media.Imaging;
using System.Text.RegularExpressions;
using Microsoft.Phone.Net.NetworkInformation;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Tasks;
using Microsoft.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using NextInpact.Panels;
using NextInpact.Service;
using NextInpact.Scheduler;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextInpact"
//*******************************************************************************************************************************
namespace NextInpact.Frames
	{

	//  #####  ####   #   #          ###   ####   #####  #   ###   #   #   ####
	//  #      #   #  ## ##         #   #  #   #    #    #  #   #  ##  #  #    
	//  ###    ####   # # #  #####  #   #  ####     #    #  #   #  # # #   ### 
	//  #      #   #  #   #         #   #  #        #    #  #   #  #  ##      #
	//  #      #   #  #   #          ###   #        #    #   ###   #   #  #### 
	
	//***************************************************************************************************************************
	#region // Frame Frm_Options
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit la fenêtre Player.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public partial class Frm_Options : PhoneApplicationPage
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Constantes
		//-----------------------------------------------------------------------------------------------------------------------
		private static Regex RegAccount = new Regex ( @"<p>(.*?)<"           , RegexOptions.IgnoreCase );
		private static Regex RegPremium = new Regex ( @"<span(.*?)>\[(.*?)\]", RegexOptions.IgnoreCase );
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private static bool IntReloadingIsRequired  = false;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private        bool ApplyOptions            = true;
		private        bool DynamicsTileCheckValue  = false;
		private        int  NotificationsDelayValue = 0;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		// Prototype   : public Frm_Options ()
		// Description : Constructeur de la classe
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Frm_Options</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Frm_Options ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.InitializeComponent ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.PseudoControl.Text = StorageSettings.GetValue ( "last-account", string.Empty );

			this.LoginControl      .Visibility = Visibility.Visible;
			this.UserControl       .Visibility = Visibility.Collapsed;
			this.UserOptionsControl.Visibility = Visibility.Collapsed;

			this.SmileyOption      .IsChecked     = true;
			this.PictureOption     .IsChecked     = true;
			this.CommentariesOption.IsChecked     = true;
			this.CommentariesPicker.SelectedIndex = 0;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.DynamicsTileCheckValue  = ScheduledAgent.TileIsActive  && Instance.ScheduledAgentActive;

			this.NotificationsDelayValue = ( Instance.ScheduledAgentActive ) ? ScheduledAgent.ToastDelay : 0;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Affichage des sections
			//-------------------------------------------------------------------------------------------------------------------
			switch ( Instance.PanelMode )
				{
				case PanelMode.Column : this.PanelModePicker.SelectedIndex = 1; break;
				case PanelMode.Grid   : this.PanelModePicker.SelectedIndex = 2; break;
				case PanelMode.List   : this.PanelModePicker.SelectedIndex = 3; break;
				default               : this.PanelModePicker.SelectedIndex = 0; break;
				}

			this.PanelModePicker.Visibility = ( DeviceInfos.Version != WindowsPhoneVersion.WP10 ).ToVisibility ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Taille de la police
			//-------------------------------------------------------------------------------------------------------------------
			switch ( RestService.FontSize )
				{
				case 14 : this.TextLevelPicker.SelectedIndex = 0; break;
				case 18 : this.TextLevelPicker.SelectedIndex = 2; break;
				default : this.TextLevelPicker.SelectedIndex = 1; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Garder les menus visible
			//-------------------------------------------------------------------------------------------------------------------
			this.ExpandMenuCheck.IsChecked = Instance.ExpandMenu;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Activer la compression
			//-------------------------------------------------------------------------------------------------------------------
			this.UseCompressionCheck.IsChecked = RestService.UseCompression;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Activer les tuiles dynamiques
			//-------------------------------------------------------------------------------------------------------------------
			this.DynamicsTileCheck.IsChecked = this.DynamicsTileCheckValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Notifications Toast
			//-------------------------------------------------------------------------------------------------------------------
			switch ( this.NotificationsDelayValue )
				{
				case 1  : this.NotificationsPicker.SelectedIndex = 1; break;
				case 2  : this.NotificationsPicker.SelectedIndex = 2; break;
				case 4  : this.NotificationsPicker.SelectedIndex = 3; break;
				default : this.NotificationsPicker.SelectedIndex = 0; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Version
			//-------------------------------------------------------------------------------------------------------------------
			this.VersionLabel.Text = string.Format ( "Version {0}.{1}.{2}.{3}"     , 
			                                         VersionUtils.Current.Major    , 
			                                         VersionUtils.Current.Minor    , 
			                                         VersionUtils.Current.Build    , 
			                                         VersionUtils.Current.Revision );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.OnOrientationChanged ( new OrientationChangedEventArgs ( PageOrientation.None ) );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ApplyOptions = false;

			this.LoadAccount ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
			
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="HtmlContent"></param>
		/// <param name="Account"></param>
		/// <param name="Premium"></param>
		/// <param name="OptionSmileys"></param>
		/// <param name="OptionImages"></param>
		/// <param name="OptionCommentaries"></param>
		/// <param name="CommentariesLevel"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static bool ExtractBlocks ( string HtmlContent, out string Account            , 
		                                                        out string Premium            , 
																out bool   OptionSmileys      , 
																out bool   OptionImages       , 
																out int    CommentariesLevel  , 
																out bool   OptionCommentaries )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Match Match = null;

			Account            = string.Empty;
			Premium            = string.Empty;
			OptionSmileys      = true;
			OptionImages       = true;
			OptionCommentaries = true;
			CommentariesLevel  = 10;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Parsing
				//---------------------------------------------------------------------------------------------------------------
				int AccountBlockStart = HtmlContent.IndexOf ( "class=\"options_logon\"" );
				int DisplayBlockStart = HtmlContent.IndexOf ( "class=\"options_aff\""   );

				if ( AccountBlockStart == -1 || DisplayBlockStart == -1 ) return false;

				int AccountBlockEnd = HtmlContent.IndexOf ( "id=\"button_logOff\"", AccountBlockStart );
				int DisplayBlockEnd = HtmlContent.IndexOf ( "</section>"          , DisplayBlockStart );

				if ( AccountBlockEnd == -1 || DisplayBlockEnd == -1 ) return false;

				string Account_Block = HtmlContent.Substring ( AccountBlockStart, AccountBlockEnd - AccountBlockStart );
				string Display_Block = HtmlContent.Substring ( DisplayBlockStart, DisplayBlockEnd - DisplayBlockStart );

				Account_Block = Account_Block.Replace ( "\r", "" ).Replace ( "\n", "" );
				Display_Block = Display_Block.Replace ( "\r", "" ).Replace ( "\n", "" );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#region // Account
				//---------------------------------------------------------------------------------------------------------------
				Match = RegAccount.Match ( Account_Block );

				if ( ! Match.Success ) return false;

				Account = Match.Groups[1].Value.Trim ();

				Match = RegPremium.Match ( Account_Block );

				if ( Match.Success ) Premium = "[" + Match.Groups[2].Value.Trim () + "]";
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#region // Smileys
				//---------------------------------------------------------------------------------------------------------------
				int Option_Smileys = Display_Block.IndexOf ( "id=\"option_smileys\"" );

				if ( Option_Smileys > -1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					int S_Opt = Display_Block.LastIndexOf ( "<select"  , Option_Smileys );
					int E_Opt = Display_Block.IndexOf     ( "</select>", Option_Smileys );

					if ( S_Opt > -1 && E_Opt > S_Opt )
						{
						string OptContent = Display_Block.Substring ( S_Opt, E_Opt - S_Opt );

						if ( OptContent.IndexOf ( "selected=\"selected\" value=\"off\"" ) != -1 )
							OptionSmileys = false;
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#region // Images
				//---------------------------------------------------------------------------------------------------------------
				int Option_Images = Display_Block.IndexOf ( "id=\"option_images\"" );

				if ( Option_Images > -1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					int S_Opt = Display_Block.LastIndexOf ( "<select"  , Option_Images );
					int E_Opt = Display_Block.IndexOf     ( "</select>", Option_Images );

					if ( S_Opt > -1 && E_Opt > S_Opt )
						{
						string OptContent = Display_Block.Substring ( S_Opt, E_Opt - S_Opt );

						if ( OptContent.IndexOf ( "selected=\"selected\" value=\"off\"" ) != -1 )
							OptionImages = false;
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#region // Commentaires sous les news
				//---------------------------------------------------------------------------------------------------------------
				int Option_Aff_Comm = Display_Block.IndexOf ( "id=\"option_aff_comm\"" );

				if ( Option_Aff_Comm > -1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					int S_Opt = Display_Block.LastIndexOf ( "<select"  , Option_Aff_Comm );
					int E_Opt = Display_Block.IndexOf     ( "</select>", Option_Aff_Comm );

					if ( S_Opt > -1 && E_Opt > S_Opt )
						{
						string OptContent = Display_Block.Substring ( S_Opt, E_Opt - S_Opt );

						if ( OptContent.IndexOf ( "selected=\"selected\" value=\"off\"" ) != -1 )
							OptionCommentaries = false;
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#region // Commentaires par actu
				//---------------------------------------------------------------------------------------------------------------
				int Btn_Comm_Page_Active = Display_Block.IndexOf ( "btn_comm_page_active" );

				if ( Btn_Comm_Page_Active > -1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					int S_Opt = Display_Block.IndexOf ( ">"        , Btn_Comm_Page_Active );
					int E_Opt = Display_Block.IndexOf ( "</button>", Btn_Comm_Page_Active );

					if ( S_Opt > -1 && E_Opt > S_Opt )
						{
						string OptContent = Display_Block.Substring ( S_Opt+1, E_Opt - S_Opt-1 );

						CommentariesLevel = OptContent.Trim ().ToInteger ();
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch { return false; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge le compte courant.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void LoadAccount ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! NetworkInterface.GetIsNetworkAvailable () )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LoginControl      .Visibility = Visibility.Visible;
				this.UserControl       .Visibility = Visibility.Collapsed;
				this.UserOptionsControl.Visibility = Visibility.Collapsed;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( string.IsNullOrEmpty ( RestService.InpactStore ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LoginControl      .Visibility = Visibility.Visible;
				this.UserControl       .Visibility = Visibility.Collapsed;
				this.UserOptionsControl.Visibility = Visibility.Collapsed;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				this.IsIndeterminate = true;

				RestService.GetAccount ( (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( A.Content ) )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ParseAccount ( A.Content );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						this.LoginControl      .Visibility = Visibility.Visible;
						this.UserControl       .Visibility = Visibility.Collapsed;
						this.UserOptionsControl.Visibility = Visibility.Collapsed;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.IsIndeterminate = false;
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge le compte courant.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ParseAccount ( string HtmlContent )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! string.IsNullOrEmpty ( HtmlContent ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Account            = string.Empty;
				string Premium            = string.Empty;
				bool   OptionSmileys      = true;
				bool   OptionImages       = true;
				bool   OptionCommentaries = true;
				int    CommentariesLevel  = 10;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ExtractBlocks ( HtmlContent, out Account            , 
												  out Premium            , 
												  out OptionSmileys      , 
												  out OptionImages       , 
												  out CommentariesLevel  , 
												  out OptionCommentaries ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.NameControl  .Text = Account;
					this.StatusContent.Text = Premium;

					this.StatusControl.Visibility = ( ! string.IsNullOrEmpty 
								                            ( Premium ) ).ToVisibility ();
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.ApplyOptions = true;

					this.SmileyOption      .IsChecked = OptionSmileys;
					this.PictureOption     .IsChecked = OptionImages;
					this.CommentariesOption.IsChecked = OptionCommentaries;

					switch ( CommentariesLevel )
						{
						case 20 : this.CommentariesPicker.SelectedIndex = 1; break;
						case 50 : this.CommentariesPicker.SelectedIndex = 2; break;
						default : this.CommentariesPicker.SelectedIndex = 0; break;
						}

					this.ApplyOptions = false;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.LoginControl      .Visibility = Visibility.Collapsed;
					this.UserControl       .Visibility = Visibility.Visible;
					this.UserOptionsControl.Visibility = Visibility.Visible;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					return;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.LoginControl      .Visibility = Visibility.Visible;
			this.UserControl       .Visibility = Visibility.Collapsed;
			this.UserOptionsControl.Visibility = Visibility.Collapsed;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Traite le chargement de mes apps.
		/// </summary>
		/// <param name="Sender"></param>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void MarketPlaceAppContentCompleted ( object Sender, 
		                                                    DownloadStringCompletedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string ImgMask = "http://cdn.marketplaceimages.windowsphone.com/v8/images/{0}?imageType=ws_icon_medium";

			List<AppButton> Apps = new List<AppButton> ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! string.IsNullOrEmpty ( Args.Result ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Retrait des 'a:'
					//-----------------------------------------------------------------------------------------------------------
					var Content = new System.Text.StringBuilder ( Args.Result );

					for ( int Index = 0 ; Index < Content.Length - 3 ; Index ++ )
						{
						char Car = Content[Index];

						if ( Car == '<' || Car == '/' )
							{
							if ( Content[Index + 1] == 'a' && Content[Index + 2] == ':' )
								{
								Content.Remove ( Index + 1, 2 );
								}
							}
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					XNamespace ns = "http://schemas.zune.net/catalog/apps/2008/02";

					XElement Document = XElement.Parse ( Content.ToString () );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Lecture des Apps
					//-----------------------------------------------------------------------------------------------------------
					foreach ( XElement XItem in Document.Elements ( ns + "entry" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						var XId = XItem.Element ( ns + "id" );

						if ( XId == null ) continue;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						var XTitle = XItem.Element ( ns + "title" );

						if ( XTitle == null ) continue;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						var XImage = XItem.Element ( ns + "image" );

						if ( XImage == null ) continue;

						var XImageSrc = XImage.Element ( ns + "id" );

						if ( XImageSrc == null ) continue;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						string ImageSrc = XImageSrc.Value.Replace ( "urn:uuid:", "" );

						ImageSrc = string.Format ( ImgMask, ImageSrc );

						Apps.Add ( new AppButton ()
							{
							Content = XTitle.Value                            ,
							Tag     = XId.Value.Replace ( "urn:uuid:", "" )   ,
							Source  = new BitmapImage ( new Uri ( ImageSrc ) ),
							} );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Apps.Count > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AppsBlock.Children.Clear ();

				foreach ( AppButton Button in Apps ) this.AppsBlock.Children.Add ( Button );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.LoadingBlock.Visibility = Visibility.Collapsed;
			this.AppsBlock   .Visibility = Visibility.Visible;

			this.AppProgressBar.IsIndeterminate = false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appelé après la modification de la propriété Orientation.
		/// </summary>
		/// <param name="Args">Arguments d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLoaded ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.AppProgressBar.IsIndeterminate = true;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				CultureInfo CultureInfo = CultureInfo.CurrentCulture;

				string CultureName   = CultureInfo.Name;
				string CultureLetter = (CultureName.Length == 5) ? CultureName.Substring ( 3, 2 )
				                                                                    : string.Empty;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Version Version = Environment.OSVersion.Version;

				if ( Version.Major > 8 ) Version = new Version ( 8, 10, 0, 0 );
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				var Request = new WebClient ();

				Request.Headers["User-Agent"] = "MarketPlace Application Infos Both/1.0";

				string Mask = "http://marketplaceedgeservice.windowsphone.com/v9/catalog/apps" +
				              "?os={0}"                                                        +
				              "&lang={1}"                                                      +
				              "&cc={2}"                                                        +
				              "&dm="                                                           +
				              "&oemId="                                                        +
				              "&moId="                                                         +
				              "&chunkSize=50"                                                  +
				              "&orderBy=GlobalRank"                                            +
				              "&publisher=Nicolas+Dagnas"                                      +
				              "&cf=99-1"                                                       +
				              "&category=windowsphone.newsandweather";

				string Uri = string.Format ( Mask, Version, CultureName, CultureLetter );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Request.DownloadStringCompleted += this.MarketPlaceAppContentCompleted;

				Request.DownloadStringAsync ( new Uri ( Uri ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appelé après la modification de la propriété Orientation.
		/// </summary>
		/// <param name="Args">Arguments d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnOrientationChanged ( OrientationChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			PhoneOrientation Orientation = DeviceInfos.Orientation;

			this.AppLeftBar  .Visibility = ( Orientation == PhoneOrientation.LandscapeRight ).
			                                                                       ToVisibility ();
			this.RightAppBar .Visibility = ( Orientation == PhoneOrientation.LandscapeLeft  ).
			                                                                       ToVisibility ();
			this.BottomAppBar.Visibility = ( Orientation == PhoneOrientation.Portrait       ).
			                                                                       ToVisibility ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			base.OnOrientationChanged ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Liées aux Contrôles
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur Application.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnAppClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			FrameworkElement Button = Sender as FrameworkElement;

			if ( Button != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					MarketplaceDetailTask Task = new MarketplaceDetailTask ()
						{
						ContentIdentifier = Button.Tag.ToString ()             ,
						ContentType       = MarketplaceContentType.Applications,
						};

					Task.Show ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton <b>connexion</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnConnectButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.PseudoControl  .IsEnabled = false;
			this.PasswordControl.IsEnabled = false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( ! NetworkInterface.GetIsNetworkAvailable () )
				{
				//---------------------------------------------------------------------------------------------------------------
				MessageBox.Show ( "Aucune connexion disponible.\n\nRetente ultérieurement." );

				this.PseudoControl  .IsEnabled = true;
				this.PasswordControl.IsEnabled = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( string.IsNullOrWhiteSpace ( this.PseudoControl.Text ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				MessageBox.Show ( "Ton pseudonyme n'est pas renseigné." );

				this.PseudoControl  .IsEnabled = true;
				this.PasswordControl.IsEnabled = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( string.IsNullOrWhiteSpace ( this.PasswordControl.Password ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				MessageBox.Show ( "Ton mot de passe n'est pas renseigné" );

				this.PseudoControl  .IsEnabled = true;
				this.PasswordControl.IsEnabled = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				this.IsIndeterminate = true;

				RestService.ConnectLogin ( (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( A.Content ) )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( A.Content.IndexOf ( "button_logOff" ) != -1 )
							{
							//---------------------------------------------------------------------------------------------------
							StorageSettings.SetValue ( "last-account", this.PseudoControl.Text );

							this.ParseAccount ( A.Content );

							this       .IsIndeterminate        = false;
							Frm_Options.IntReloadingIsRequired = true;

							this.PseudoControl  .IsEnabled = true;
							this.PasswordControl.IsEnabled = true;

							return;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.PseudoControl  .IsEnabled = true;
					this.PasswordControl.IsEnabled = true;

					this.IsIndeterminate = false;

					MessageBox.Show ( "Pseudonyme ou mot de passe invalide" );
					//-----------------------------------------------------------------------------------------------------------
					}, this.PseudoControl.Text, this.PasswordControl.Password );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton <b>déconnexion</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnDisconnectButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! NetworkInterface.GetIsNetworkAvailable () )
				{
				//---------------------------------------------------------------------------------------------------------------
				MessageBox.Show ( "Aucune connexion disponible.\n\nRetente ultérieurement." );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				this.IsIndeterminate = true;

				RestService.DisconnectLogin ( (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this.PseudoControl  .Text     = StorageSettings.GetValue ( "last-account", 
					                                                                string.Empty );
					this.PasswordControl.Password = string.Empty;

					this.LoginControl      .Visibility = Visibility.Visible;
					this.UserControl       .Visibility = Visibility.Collapsed;
					this.UserOptionsControl.Visibility = Visibility.Collapsed;

					this       .IsIndeterminate        = false;
					Frm_Options.IntReloadingIsRequired = true;
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement d'état de la case à cocher.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCheckChanged ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ToggleSwitch Switch = Sender as ToggleSwitch;

			bool Value = ( Switch.IsChecked ?? true );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Afficher les smileys
			//-------------------------------------------------------------------------------------------------------------------
			if ( Sender == this.SmileyOption )
				{ Switch.Content = ( Value ) ? "Activé" : "Désactivé"; }
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Afficher les images
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.PictureOption )
				{ Switch.Content = ( Value ) ? "Activé" : "Désactivé"; }
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Commentaires sous les news
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.CommentariesOption )
				{ Switch.Content = ( Value ) ? "Activé" : "Désactivé"; }
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Garder les menus visible
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.ExpandMenuCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activé" : "Désactivé";

				Instance.ExpandMenu = Value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Activer la compression
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.UseCompressionCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activé" : "Désactivé";

				RestService.UseCompression = Value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Activer les tuiles dynamiques
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.DynamicsTileCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activée" : "Désactivée";

				if ( Value != this.DynamicsTileCheckValue )
					{
					//-----------------------------------------------------------------------------------------------------------
					ScheduledAgent.TileIsActive = Value;

					this.Dispatcher.Async ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.CheckScheduledAgentStatus ();
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( Value && ! Instance.ScheduledAgentActive )
							{
							//---------------------------------------------------------------------------------------------------
							string Caption = "Exécution en tâche de fond";
							string Message = "Le système ne permet pas ou n'autorise pas" +
							                 " l'exécution de {0} en tâche de fond."      +
											 "\n\n"                                       +
											 "Veuillez vérifier vos paramètres.";

							MessageBox.Show ( string.Format ( Message, AppInfos.Name ), 
							                                        Caption, MessageBoxButton.OK );
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							this.DynamicsTileCheck.IsChecked = false;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { ScheduledAgent.Clear (); }
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						this.DynamicsTileCheckValue = ( this.DynamicsTileCheck.IsChecked ?? true );
						//-------------------------------------------------------------------------------------------------------
						}, 500 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement d'état de la case à cocher.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCommonOptionClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			bool Smiley  = ( this.SmileyOption .IsChecked ?? true );
			bool Picture = ( this.PictureOption.IsChecked ?? true );

			int Commentaries = 10;

			switch ( this.CommentariesPicker.SelectedIndex )
				{
				case 1  : Commentaries = 20; break;
				case 2  : Commentaries = 50; break;
				default : Commentaries = 10; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( ! NetworkInterface.GetIsNetworkAvailable () )
				{
				//---------------------------------------------------------------------------------------------------------------
				MessageBox.Show ( "Aucune connexion disponible.\n\nRetente ultérieurement." );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				this.IsIndeterminate = true;

				RestService.SetCommonOptions ( (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this       .IsIndeterminate        = false;
					Frm_Options.IntReloadingIsRequired = true;
					//-----------------------------------------------------------------------------------------------------------
					}, Smiley, Picture, Commentaries );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement d'état de la case à cocher.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCommonOptionChanged ( object Sender, SelectionChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.ApplyOptions && Args.AddedItems.Count == 1 )
				this.OnCommonOptionClick ( Sender, null );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement d'état de la case à cocher.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLoggonOptionClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			bool Commentaries = ( this.CommentariesOption.IsChecked ?? true );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( ! NetworkInterface.GetIsNetworkAvailable () )
				{
				//---------------------------------------------------------------------------------------------------------------
				MessageBox.Show ( "Aucune connexion disponible.\n\nRetente ultérieurement." );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				this.IsIndeterminate = true;

				RestService.SetLoggonOptions ( (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this       .IsIndeterminate        = false;
					Frm_Options.IntReloadingIsRequired = true;
					//-----------------------------------------------------------------------------------------------------------
					}, Commentaries );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand on change d'onglet.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnPivotSelectionChanged ( object Sender, SelectionChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.PanelModePicker    .Close ();
			this.CommentariesPicker .Close ();
			this.TextLevelPicker    .Close ();
			this.NotificationsPicker.Close ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement du sélecteur de délai.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>SelectionChangedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnSelectionChanged ( object Sender, SelectionChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Affichage des sections
			//-------------------------------------------------------------------------------------------------------------------
			if ( Sender == this.PanelModePicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( this.PanelModePicker.SelectedIndex )
					{
					//-----------------------------------------------------------------------------------------------------------
					case 1  : Instance.PanelMode = PanelMode.Column; break;
					case 2  : Instance.PanelMode = PanelMode.Grid;   break;
					case 3  : Instance.PanelMode = PanelMode.List;   break;
					default : Instance.PanelMode = PanelMode.Popup;  break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Taille de la police
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.TextLevelPicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				int FontSize = RestService.FontSize;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( this.TextLevelPicker.SelectedIndex )
					{
					//-----------------------------------------------------------------------------------------------------------
					case 0  : FontSize = 14; break;
					case 2  : FontSize = 18; break;
					default : FontSize = 16; break;
					//-----------------------------------------------------------------------------------------------------------
					}

				if ( ! this.ApplyOptions && Args.AddedItems.Count == 1 )
					{
					RestService.SetFontSize ( FontSize );

					Frm_Options.IntReloadingIsRequired = true;
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Notifications Toast
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.NotificationsPicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				int Value = 0;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( this.NotificationsPicker.SelectedIndex )
					{
					//-----------------------------------------------------------------------------------------------------------
					case 1 : Value = 1; break;
					case 2 : Value = 2; break;
					case 3 : Value = 4; break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Value != this.NotificationsDelayValue )
					{
					//-----------------------------------------------------------------------------------------------------------
					ScheduledAgent.ToastDelay = Value;

					this.Dispatcher.Async ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.CheckScheduledAgentStatus ();
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Value > 0 && ! Instance.ScheduledAgentActive )
							{
							//---------------------------------------------------------------------------------------------------
							string Caption = "Exécution en tâche de fond";
							string Message = "Le système ne permet pas ou n'autorise pas" +
							                 " l'exécution de {0} en tâche de fond."      +
											 "\n\n"                                       +
											 "Veuillez vérifier vos paramètres.";

							MessageBox.Show ( string.Format ( Message, AppInfos.Name ), 
							                                        Caption, MessageBoxButton.OK );
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							Value = 0;

							this.NotificationsPicker.SelectedIndex = 0;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						this.NotificationsDelayValue = Value;
						//-------------------------------------------------------------------------------------------------------
						}, 500 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des ApplicationBarIconButton
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnReturnButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.NavigationService.CanGoBack )
				this.NavigationService.GoBack ();
			else
				Instance.RootFrame.Navigate ( new Uri ("/Frames/Frm_Home.xaml", UriKind.Relative) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton <b>laisser une évaluation</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnRateButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ApplicationReview.Show ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton <b>contacter l'auteur</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnFeedbackButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			EmailComposeTask Task = new EmailComposeTask ()
				{
				Subject = AppInfos.Name                             ,
				Body    = ""                                        ,
				To      = AppInfos.Name + "<nds-wp-news@outlook.fr>",
				};

			try { Task.Show (); } catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Propriété => IsIndeterminate
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Contrôle la barre de progression.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private bool IsIndeterminate
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.ProgressBar.IsIndeterminate;         }
			//-------------------------------------------------------------------------------------------------------------------
			set {        this.ProgressBar.IsIndeterminate = value; }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Propriété => ReloadingIsRequired
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique si l'application doit se raffraichir.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool ReloadingIsRequired
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					return Frm_Options.IntReloadingIsRequired;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				finally { Frm_Options.IntReloadingIsRequired = false; }
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************
	
	//***************************************************************************************************************************
	#region // Contrôle AppButton
	//---------------------------------------------------------------------------------------------------------------------------
	public class AppButton : System.Windows.Controls.Button
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty SourceProperty;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>AppButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static AppButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			SourceProperty = DependencyProperty.Register ( "Source", typeof (ImageSource), 
			                                   typeof (AppButton), new PropertyMetadata ( null ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>AppButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public AppButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.DefaultStyleKey = typeof (AppButton);

			base.SetValue ( Microsoft.Phone.Controls.TiltEffect.IsTiltEnabledProperty, true );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur l'objet.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnClick ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				MarketplaceDetailTask Task = new MarketplaceDetailTask ()
					{
					ContentIdentifier = this.Tag.ToString ()               ,
					ContentType       = MarketplaceContentType.Applications,
					};

				Task.Show ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit le <b>ImageSource</b> de l'image. 
		/// </summary>
		/// <returns>URI du fichier image.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public ImageSource Source
			{
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			get { return (ImageSource)base.GetValue ( SourceProperty        ); }
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			set {                     base.SetValue ( SourceProperty, value ); }
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextInpact"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
