//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Frm_Home.xaml.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du point d'entrée de l'application
// Créé le       : 17/01/2015
// Modifié le    : 04/07/2018
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Linq;
using System.Windows;
using System.MarketPlace;
using System.Windows.Media;
using System.ComponentModel;
using System.Windows.Controls;
using System.Windows.Threading;
using System.IO.IsolatedStorage;
using System.Windows.Navigation;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Windows.Phone.Shell;
using System.Windows.Phone.Controls;
using System.Text.RegularExpressions;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Tasks;
using Microsoft.Phone.Shell;
using Microsoft.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using NextInpact.Panels;
using NextInpact.Popups;
using NextInpact.Service;
using NextInpact.Scheduler;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextInpact"
//*******************************************************************************************************************************
namespace NextInpact.Frames
	{
	
	//  #####  ####   #   #         #   #   ###   #   #  #####
	//  #      #   #  ## ##         #   #  #   #  ## ##  #    
	//  ###    ####   # # #  #####  #####  #   #  # # #  ###  
	//  #      #   #  #   #         #   #  #   #  #   #  #    
	//  #      #   #  #   #         #   #   ###   #   #  #####

	//***************************************************************************************************************************
	#region // Frame Home
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit la fenêtre principale.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public partial class Frm_Home : PhoneApplicationPage, IPhoneApplicationPage
		{
		//***********************************************************************************************************************
		#region // classe WebNavigator
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet la gestion d'une pile de nabigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		class WebNavigator
			{
			//-------------------------------------------------------------------------------------------------------------------
			class WebNavigatorItem { public object Source; public int Top; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private List<WebNavigatorItem> Items = new List<WebNavigatorItem> ();
			//-------------------------------------------------------------------------------------------------------------------
		
			//*******************************************************************************************************************
			/// <summary>
			/// Ajoute un élément navigué.
			/// </summary>
			/// <param name="Source">Elément navigué.</param>
			//-------------------------------------------------------------------------------------------------------------------
			public void Add ( object Source ) { this.Items.Add ( new WebNavigatorItem () { Source = Source, Top = 0 } ); }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Recule d'un cran en arrière et renvoi l'élément vers lequel naviguer.
			/// </summary>
			/// <returns></returns>
			//-------------------------------------------------------------------------------------------------------------------
			public object GoBack ()
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Items.Count > 1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.Items.RemoveAt ( this.Items.Count - 1 );

					return this.Last;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return null;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Indique si l'ém=lément est le dernier chargé.
			/// </summary>
			/// <param name="Source">Elément à comparer.</param>
			/// <returns>
			/// <b>True</b> si l'élément est le dernier chargé, sinon <b>False</b>.
			/// </returns>
			//-------------------------------------------------------------------------------------------------------------------
			public bool IsLast ( object Source )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Source != null && this.Items.Count > 0 )
					{
					//-----------------------------------------------------------------------------------------------------------
					object LastItem = this.Items[this.Items.Count - 1].Source;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Source is SectionType && LastItem is SectionType )
						{
						//-------------------------------------------------------------------------------------------------------
						SectionType A = (SectionType)Source;
						SectionType B = (SectionType)LastItem;

						return ( A == B );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Source is Article && LastItem is Article )
						{
						//-------------------------------------------------------------------------------------------------------
						Source   = ((Article)Source  ).Uri;
						LastItem = ((Article)LastItem).Uri;

						if ( Source == null && LastItem == null ) return true;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( Source is Uri && LastItem is Uri )
							{
							//---------------------------------------------------------------------------------------------------
							Uri A = (Uri)Source;
							Uri B = (Uri)LastItem;

							return ( A.OriginalString.Equals ( B.OriginalString ) );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return false;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens le nombre déléments navigués.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public int Count { get { return this.Items.Count; } }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Indique s'il est possible de naviguer en arrière.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public bool CanGoBack { get { return ( this.Items.Count > 1 ); } }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens le dernier élément chargé.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public object Last
				{
				//---------------------------------------------------------------------------------------------------------------
				get
					{
					//-----------------------------------------------------------------------------------------------------------
					return (this.Items.Count > 0) ? this.Items[this.Items.Count - 1].Source : null;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens ou définit la position en Y de la dernière page.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public int Top
				{
				//---------------------------------------------------------------------------------------------------------------
				get
					{
					//-----------------------------------------------------------------------------------------------------------
					return ( this.Items.Count > 0 ) ? this.Items[this.Items.Count - 1].Top : 0;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				set
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.Items.Count > 0 ) this.Items[this.Items.Count - 1].Top = value;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Constantes
		//-----------------------------------------------------------------------------------------------------------------------
		private static Regex RegScriptNotify = new Regex ( "(.*?)\\s=>\\s\\\"(.*?)\\\"" );
		//-----------------------------------------------------------------------------------------------------------------------
		
		//-----------------------------------------------------------------------------------------------------------------------
		#region // Scripts
		//-----------------------------------------------------------------------------------------------------------------------
		private const string ImagesScript  = "$('a.fancyimg').click (function()"           +
		                                     " {"                                          +
		                                     " window.external.notify ('zoom-image"        +
		                                     " => \"' + $(this).prop ('href') + '\"');"    +
		                                     " });";
		//-----------------------------------------------------------------------------------------------------------------------
		private const string FontScript    = "localStorage.getItem ('.actu_content')";
		//-----------------------------------------------------------------------------------------------------------------------
		private const string SetFontScript = "localStorage.setItem ('.actu_content', '{0}')";
		//-----------------------------------------------------------------------------------------------------------------------
		private const string SearchScript  = "$('#form_search').submit (function(event)"       +
		                                     " {"                                              +
		                                     " window.external.notify ('search"                +
		                                     " => \"' + $('input[name=term]').val () + '\"');" +
											 " event.preventDefault ();" +
		                                     " });";
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private SectionType         CurrentSection   = SectionType.All;
		private Article             ToastedArticle   = Article.Empty;
		private bool                Initialized      = false;
		private WebNavigator        PageNavigator    = new WebNavigator ();
		//-----------------------------------------------------------------------------------------------------------------------
		private ImageViewerPopup    ImageViewerPopup = null;
		private SectionsPopup       SectionsPopup    = null;
		//-----------------------------------------------------------------------------------------------------------------------
		private LeftPanelColumnMode LeftPanelColumn  = null;
		private LeftPanelGridMode   LeftPanelGrid    = null;
		private LeftPanelListMode   LeftPanelList    = null;
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Boutons d'Application
		//-----------------------------------------------------------------------------------------------------------------------
		private ApplicationBarIconButton HomeAppBarButton             = null; // Page Section
		private ApplicationBarIconButton PinAppBarButton              = null; // Page Section
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton SectionAppBarButton          = null; // Page Article
		private ApplicationBarIconButton ReturnAppBarButton           = null; // Page Article
		private ApplicationBarIconButton ShareAppBarButton            = null; // Page Article
		private ApplicationBarIconButton BookmarkInAppBarButton       = null; // Page Article
		private ApplicationBarIconButton BookmarkOutAppBarButton      = null; // Page Article
		private ApplicationBarMenuItem   ViewOnlineAppBarMenu         = null; // Page Article
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton CloseImageViewerAppBarButton = null; // Popup Zoom
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton CloseSectionsAppBarButton    = null; // Popup Sections
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton RefreshAppBarButton          = null; // Global
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Frm_Home</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Frm_Home ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.InitializeComponent ();
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			#region // Création des boutons d'application
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.HomeAppBarButton             = new ApplicationBarIconButton ();
			this.PinAppBarButton              = new ApplicationBarIconButton ();
			this.SectionAppBarButton          = new ApplicationBarIconButton ();
			this.ReturnAppBarButton           = new ApplicationBarIconButton ();
			this.ShareAppBarButton            = new ApplicationBarIconButton ();
			this.BookmarkInAppBarButton       = new ApplicationBarIconButton ();
			this.BookmarkOutAppBarButton      = new ApplicationBarIconButton ();
			this.ViewOnlineAppBarMenu         = new ApplicationBarMenuItem   ();
			this.CloseImageViewerAppBarButton = new ApplicationBarIconButton ();
			this.CloseSectionsAppBarButton    = new ApplicationBarIconButton ();
			this.RefreshAppBarButton          = new ApplicationBarIconButton ();
			
			this.HomeAppBarButton            .IconUri = new Uri ( "/Images/Application/home.png"        , UriKind.Relative );
			this.PinAppBarButton             .IconUri = new Uri ( "/Images/Application/pin.png"         , UriKind.Relative );
			this.SectionAppBarButton         .IconUri = new Uri ( "/Images/Application/home.png"        , UriKind.Relative );
			this.ReturnAppBarButton          .IconUri = new Uri ( "/Images/Application/left.png"        , UriKind.Relative );
			this.ShareAppBarButton           .IconUri = new Uri ( "/Images/Application/share.png"       , UriKind.Relative );
			this.BookmarkInAppBarButton      .IconUri = new Uri ( "/Images/Application/bookmark-in.png" , UriKind.Relative );
			this.BookmarkOutAppBarButton     .IconUri = new Uri ( "/Images/Application/bookmark-out.png", UriKind.Relative );
			this.CloseImageViewerAppBarButton.IconUri = new Uri ( "/Images/Application/left.png"        , UriKind.Relative );
			this.CloseSectionsAppBarButton   .IconUri = new Uri ( "/Images/Application/left.png"        , UriKind.Relative );
			this.RefreshAppBarButton         .IconUri = new Uri ( "/Images/Application/refresh.png"     , UriKind.Relative );

			this.HomeAppBarButton            .Text = "accueil";
			this.PinAppBarButton             .Text = "épingler";
			this.SectionAppBarButton         .Text = "section";
			this.ReturnAppBarButton          .Text = "retour";
			this.ShareAppBarButton           .Text = "partager";
			this.BookmarkInAppBarButton      .Text = "enregistrer";
			this.BookmarkOutAppBarButton     .Text = "supprimer";
			this.ViewOnlineAppBarMenu        .Text = "visualiser en ligne";
			this.CloseImageViewerAppBarButton.Text = "retour";
			this.CloseSectionsAppBarButton   .Text = "retour";
			this.RefreshAppBarButton         .Text = "recharger";

			this.HomeAppBarButton            .Click += this.OnHomeButtonClick;
			this.PinAppBarButton             .Click += this.OnPinButtonClick;
			this.SectionAppBarButton         .Click += this.OnSectionButtonClick;
			this.ReturnAppBarButton          .Click += this.OnReturnButtonClick;
			this.ShareAppBarButton           .Click += this.OnShareButtonClick;
			this.BookmarkInAppBarButton      .Click += this.OnBookmarkInButtonClick;
			this.BookmarkOutAppBarButton     .Click += this.OnBookmarkOutButtonClick;
			this.ViewOnlineAppBarMenu        .Click += this.OnViewOnlineMenuClick;
			this.CloseImageViewerAppBarButton.Click += this.OnCloseImageViewerButtonClick;
			this.CloseSectionsAppBarButton   .Click += this.OnCloseSectionsButtonClick;
			this.RefreshAppBarButton         .Click += this.OnRefreshButtonClick;

			this.ApplicationBar.MenuItems.Add ( this.ViewOnlineAppBarMenu );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ImageViewerPopupContainer.Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );
			this.SectionsPopupContainer   .Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );

			this.ActiveLeftPanel ();

			this.IsIndeterminate = true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le panneau de gauche.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLeftPanelClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.LayoutRoot.SelectedPanel == SlidePanel.Left )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Args is ObjectEventArgs<SectionType> )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.Suspend ();
						
					var Arguments = Args as ObjectEventArgs<SectionType>;

					if ( Arguments != null )
						{
						//-------------------------------------------------------------------------------------------------------
						this.LayoutRoot.CloseSelectedPanel ( (X, Y) =>
							{
							if ( this.PageNavigator.IsLast ( Arguments.Self ) )
								this.Navigate ( false, Arguments.Self );
							else
								this.Navigate ( true , Arguments.Self );
							} );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					this.LayoutRoot.CloseSelectedPanel ( (X, Y) =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.RootFrame.Navigate ( new Uri ( "/Frames/Frm_Options.xaml", 
							                                                  UriKind.Relative ) );
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le thème en cours.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ActiveLeftPanel ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			switch ( Instance.PanelMode )
				{
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.Grid :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelGrid == null )
						{
						this.LeftPanelGrid = new LeftPanelGridMode ();

						this.LeftPanelGrid.Click += this.OnLeftPanelClick;
						}

					if ( this.LayoutRoot.LeftContent != this.LeftPanelGrid )
						this.LayoutRoot.LeftContent = this.LeftPanelGrid;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.List :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelList == null )
						{
						this.LeftPanelList = new LeftPanelListMode ();

						this.LeftPanelList.Click += this.OnLeftPanelClick;
						}

					if ( this.LayoutRoot.LeftContent != this.LeftPanelList )
						this.LayoutRoot.LeftContent = this.LeftPanelList;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.Column :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelColumn == null )
						{
						this.LeftPanelColumn = new LeftPanelColumnMode ();

						this.LeftPanelColumn.Click += this.OnLeftPanelClick;
						}

					if ( this.LayoutRoot.LeftContent != this.LeftPanelColumn )
						this.LayoutRoot.LeftContent = this.LeftPanelColumn;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				default : this.LayoutRoot.LeftContent = null; break;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le thème en cours.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void SetTitle ( SectionType Section )
			{
			//-------------------------------------------------------------------------------------------------------------------
			switch ( Section )
				{
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.All       : this.Section.Text = "TOUTE L'ACTUALITÉ";     break;
				case SectionType.Bookmarks : this.Section.Text = "MES FAVORIS";           break;
				case SectionType.GoodDeals : this.Section.Text = "BONS PLANS";            break;
				case SectionType.Folders   : this.Section.Text = "DOSSISERS";             break;
				case SectionType.Forum     : this.Section.Text = "FORUM";                 break;
				case SectionType.Shoutbox  : this.Section.Text = "SHOUTBOX";              break;
				case SectionType.Tests     : this.Section.Text = "TESTS";                 break;
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.Culture   : this.Section.Text = "CULTURE NUMÉRIQUE";     break;
				case SectionType.Drafting  : this.Section.Text = "NOTES DE LA RÉDACTION"; break;
				case SectionType.Economy   : this.Section.Text = "ÉCONOMIE";              break;
				case SectionType.Hardware  : this.Section.Text = "MATÉRIEL";              break;
				case SectionType.Internet  : this.Section.Text = "INTERNET";              break;
				case SectionType.Law       : this.Section.Text = "DROIT";                 break;
				case SectionType.Mobility  : this.Section.Text = "MOBILITÉ";              break;
				case SectionType.Software  : this.Section.Text = "LOGICIELS";             break;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'une pression sur le bouton Précédent.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>CancelEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnBackKeyPress ( System.ComponentModel.CancelEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.BeginBackKeyPress != null )
				{
				Delegate[] Delegates = this.BeginBackKeyPress.GetInvocationList ();

				foreach ( Delegate CallBack in Enumerable.Reverse<Delegate> ( Delegates ) )
					((EventHandler<CancelEventArgs>)CallBack) ( this, Args );
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			base.OnBackKeyPress ( Args );

			if ( Args.Cancel ) return;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Viewer
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.ImageViewerPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CloseImageViewerPopup ();

				Args.Cancel = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// SectionsPopup
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.SectionsPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CloseSectionsPopup ();

				Args.Cancel = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Page Web
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! Args.Cancel )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.LayoutRoot.SelectedPanel != SlidePanel.Center  )
					{
					//-----------------------------------------------------------------------------------------------------------
					Args.Cancel = true;

					this.LayoutRoot.SelectedPanel = SlidePanel.Center;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Gestion du Buffer
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.PageNavigator.CanGoBack )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.GoBack ();

					Args.Cancel = true;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Déclenche l'événement <b>Loaded</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLoaded ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Initialized = true;

				this.UpdadeApplicationBarIconButton ();

				this.ApplicationBar.IsVisible = true;

				this.Dispatcher.Async ( () =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! this.ToastedArticle.IsEmpty )
						this.Navigate ( true, this.ToastedArticle );
					else
						this.Navigate ( true, this.CurrentSection );

					ScheduledAgent.Clear ();
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appelé lorsqu'une page devient la page active dans une frame.
		/// </summary>
		/// <param name="Args">Objet qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnNavigatedTo ( NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.NavigationContext != null && this.NavigationContext.QueryString != null 
				                                     && Args.NavigationMode == NavigationMode.New )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.NavigationContext.QueryString.ContainsKey ( "Section" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						switch ( this.NavigationContext.QueryString["Section"] )
							{
							//---------------------------------------------------------------------------------------------------
							case "Bookmarks" : this.CurrentSection = SectionType.Bookmarks; break;
							case "GoodDeals" : this.CurrentSection = SectionType.GoodDeals; break;
							case "Folders"   : this.CurrentSection = SectionType.Folders;   break;
							case "Forum"     : this.CurrentSection = SectionType.Forum;     break;
							case "Shoutbox"  : this.CurrentSection = SectionType.Shoutbox;  break;
							case "Tests"     : this.CurrentSection = SectionType.Tests;     break;
							//---------------------------------------------------------------------------------------------------
							case "Culture"   : this.CurrentSection = SectionType.Culture;   break;
							case "Drafting"  : this.CurrentSection = SectionType.Drafting;  break;
							case "Economy"   : this.CurrentSection = SectionType.Economy;   break;
							case "Hardware"  : this.CurrentSection = SectionType.Hardware;  break;
							case "Internet"  : this.CurrentSection = SectionType.Internet;  break;
							case "Law"       : this.CurrentSection = SectionType.Law;       break;
							case "Mobility"  : this.CurrentSection = SectionType.Mobility;  break;
							case "Software"  : this.CurrentSection = SectionType.Software;  break;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						this.SetTitle ( this.CurrentSection );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					else if ( this.NavigationContext.QueryString.ContainsKey ( "Article" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ToastedArticle = Article.Parse ( this.NavigationContext.
						                                                  QueryString["Article"] );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Args.NavigationMode == NavigationMode.Back )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Dispatcher.Async ( () =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this.LayoutRoot.CloseSelectedPanel ( (X, Y) => { this.ActiveLeftPanel (); } );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Frm_Options.ReloadingIsRequired )
						{
						//-------------------------------------------------------------------------------------------------------
						this.NavigateTo ( true, this.PageNavigator.Last );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( this.IsIndeterminate )
						{
						//-------------------------------------------------------------------------------------------------------
						this.NavigateTo ( true, this.PageNavigator.Last );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, 500 );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appelé après la modification de la propriété Orientation.
		/// </summary>
		/// <param name="Args">Arguments d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnOrientationChanged ( OrientationChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			PhoneOrientation Orientation = Args.Orientation.ToPhoneOrientation ();
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			this.LeftMenuPanel .Visibility = ( Orientation == PhoneOrientation.LandscapeLeft  ).ToVisibility ();
			this.AppLeftBar    .Visibility = ( Orientation == PhoneOrientation.LandscapeRight ).ToVisibility ();
			this.TitlePanel    .Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();
			this.ChromeBar     .Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();
			this.RightMenuPanel.Visibility = ( Orientation == PhoneOrientation.LandscapeRight ).ToVisibility ();
			this.RightAppBar   .Visibility = ( Orientation == PhoneOrientation.LandscapeLeft  ).ToVisibility ();
			this.BottomAppBar  .Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();

			if ( DeviceInfos.Version != WindowsPhoneVersion.WP81 )
				SystemTray.IsVisible = ( Orientation == PhoneOrientation.Portrait );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Orientation == PhoneOrientation.LandscapeLeft )
				this.ImageViewerPopupContainer.SetValue ( Grid.ColumnProperty, 0 );
			//-------------------------------------------------------------------------------------------------------------------
			else
				this.ImageViewerPopupContainer.SetValue ( Grid.ColumnProperty, 1 );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Orientation == PhoneOrientation.Portrait )
				{
				this.ImageViewerPopupContainer.Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );
				this.SectionsPopupContainer   .Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );
				}
			else
				{
				this.ImageViewerPopupContainer.Margin = new Thickness ( 0, 0, 0, 0 );
				this.SectionsPopupContainer   .Margin = new Thickness ( 0, 0, 0, 0 );
				}

			if ( this.SectionsPopup != null )
				this.SectionsPopup.OnOrientationChanged ( Orientation );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			base.OnOrientationChanged ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion de la Navigation
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une navigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void Navigate ( bool AllowCache, object Source )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Obtention de la position en Y
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PageNavigator.Count > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				object StrScrollTop = this.WebBrowserControl.Eval ( "window.pageYOffset.toString()" );

				if ( StrScrollTop is string )
					this.PageNavigator.Top = StrScrollTop.ToString ().ToInteger ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On place la page dans le Buffer
			//-------------------------------------------------------------------------------------------------------------------
			this.PageNavigator.Add ( Source );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Mise à jours des Icones
			//-------------------------------------------------------------------------------------------------------------------
			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On y va
			//-------------------------------------------------------------------------------------------------------------------
			this.NavigateTo ( AllowCache, Source );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une navigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void GoBack ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			// On place la page dans le Buffer
			//-------------------------------------------------------------------------------------------------------------------
			object Source = this.PageNavigator.GoBack ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Mise à jours des Icones
			//-------------------------------------------------------------------------------------------------------------------
			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On y va
			//-------------------------------------------------------------------------------------------------------------------
			this.NavigateTo ( true, Source );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Rafraichit la page courante.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void Refresh ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Obtention de la position en Y
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PageNavigator.Count > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				object StrScrollTop = this.WebBrowserControl.Eval ( "window.pageYOffset.toString()" );

				if ( StrScrollTop is string )
					this.PageNavigator.Top = StrScrollTop.ToString ().ToInteger ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.NavigateTo ( false, this.PageNavigator.Last );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une navigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NavigateTo ( bool AllowCache, object Source )
			{
			//--------------------------------------------------------------------------------------------------------------------
			this.IsIndeterminate = true;
			//--------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On charge une Section
			//-------------------------------------------------------------------------------------------------------------------
			if ( Source is SectionType )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CurrentSection = (SectionType)Source;

				this.SetTitle ( this.CurrentSection );

				if ( this.CurrentSection == SectionType.Bookmarks )
					RestService.GetBookmarks ( this.NavigateOnComplete );
				else
					RestService.GetContent   ( this.NavigateOnComplete, AllowCache, this.CurrentSection );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// C'est un Article (Article, recherche, dossier, etc ...)
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Source is Article )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Article = (Article)Source;

				this.SetTitle ( this.CurrentSection );

				RestService.GetContent ( NavigateOnComplete, AllowCache, Article );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand le contenue est prêt à être chargé.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NavigateOnComplete ( object Sender, RestEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			object Source = Args.AssociateObject;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Autre
			//-------------------------------------------------------------------------------------------------------------------
			if ( Source is Article )
				this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Chargement du résultat
			//-------------------------------------------------------------------------------------------------------------------
			this.WebBrowserControl.Tag = Args.Content;

			if ( ! string.IsNullOrEmpty ( Args.FileName ) || 
			     ! string.IsNullOrEmpty ( Args.Content  ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.PageNavigator.IsLast ( Source ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					if      ( ! string.IsNullOrEmpty ( Args.FileName ) )
						this.WebBrowserControl.Navigate ( new Uri ( Args.FileName, UriKind.Relative ) );
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! string.IsNullOrEmpty ( Args.Content  ) )
						this.WebBrowserControl.NavigateToString ( Args.Content );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else { this.WebBrowser_LoadCompleted ( this, null ); }
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else { this.WebBrowser_LoadCompleted ( this, null ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures associées au Navigateur
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit après le chargement du contenu par le contrôle WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_LoadCompleted ( object Sender, NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			object FontSize = this.WebBrowserControl.Eval ( FontScript );

			if ( FontSize != null )
				RestService.FontSize = FontSize.ToString ().ToInteger ();
				
			this.WebBrowserControl.Eval ( ImagesScript );
			this.WebBrowserControl.Eval ( SearchScript );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.IsIndeterminate = false;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Obtention de la position en Y
			//-------------------------------------------------------------------------------------------------------------------
			int Top = this.PageNavigator.Top;

			if ( Top > 0 )
				{
				this.Dispatcher.Async ( () =>
					{
					this.WebBrowserControl.Eval ( "document.documentElement.scrollTop = " + Top );
					}, 400 );
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On met à jour le titre au cas ou
			//-------------------------------------------------------------------------------------------------------------------
			Article CurrentArticle = this.PageNavigator.Last as Article;

			if ( CurrentArticle != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( string.IsNullOrEmpty ( CurrentArticle.Title ) )
					{
					string Title = this.WebBrowserControl.Eval ( "document.title" ) as string;

					if ( ! string.IsNullOrEmpty ( Title ) )
						{
						CurrentArticle.Title = System.Net.HttpUtility.HtmlDecode ( Title );

						this.UpdadeApplicationBarIconButton ();
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit après une navigation réussie du contrôle WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_Navigated ( object Sender, NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.WebBrowserControl.Eval ( string.Format ( SetFontScript, RestService.FontSize ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors de la navigation du contrôle du WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigatingEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_Navigating ( object Sender, NavigatingEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Args.Uri == null ) { Args.Cancel = true; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On charge une page en Cache
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! Args.Uri.IsAbsoluteUri ) {}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// La page est une page interne mais pas sur le bon domaine
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Args.Uri.Host.EqualsIgnoreCase ( "www.nextinpact.com" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Args.Cancel = true;

				this.Dispatcher.BeginInvoke ( () =>
					{
					string RedirectUri = Args.Uri.OriginalString.Replace ( "www.nextinpact.com", 
					                                                       "m.nextinpact.com" );
					
					this.Navigate ( true, Article.Parse ( new Uri ( RedirectUri ) ) );
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// La page est une page Externe
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! Args.Uri.Host.EqualsIgnoreCase ( "m.nextinpact.com"     ) && 
			          ! Args.Uri.Host.EqualsIgnoreCase ( "forum.nextinpact.com" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				try { ( new WebBrowserTask () { Uri = Args.Uri } ).Show (); } catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// La page est une page Externe
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Args.Uri.OriginalString.Contains ( "/bon-plan/" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				try { ( new WebBrowserTask () { Uri = Args.Uri } ).Show (); } catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Ouverture du panneau de droite
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Args.Uri.OriginalString.Contains ( "#options" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Args.Cancel = true;

				Instance.RootFrame.Navigate ( new Uri ("/Frames/Frm_Options.xaml", UriKind.Relative) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// La page est une page interne mais pas encore gérée
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				Args.Cancel = true;

				this.Dispatcher.BeginInvoke ( () => { this.Navigate ( true, Article.Parse ( Args.Uri ) ); } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit après l'échec de la navigation du contrôle WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationFailedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_NavigationFailed ( object Sender, NavigationFailedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.IsIndeterminate = false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque Javascript appelle la méthode window.external.notify(<data>)
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NotifyEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_ScriptNotify ( object Sender, NotifyEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			var M = RegScriptNotify.Match ( Args.Value );

			if ( M.Success )
				{
				//---------------------------------------------------------------------------------------------------------------
				// Zoom sur une Image
				//---------------------------------------------------------------------------------------------------------------
				if ( M.Groups[1].Value.EqualsIgnoreCase ( "zoom-image" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					try { this.OpenImageViewerPopup ( new Uri ( M.Groups[2].Value ) ); } catch {}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Zoom sur une Image
				//---------------------------------------------------------------------------------------------------------------
				else if ( M.Groups[1].Value.EqualsIgnoreCase ( "search" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					string SearchUri = "https://m.nextinpact.com/rechercher?term=" + M.Groups[2].Value;

					this.Navigate ( true, Article.Parse ( new Uri ( SearchUri ) ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du Zoom
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre la Popup de visualisation des Images.
		/// </summary>
		/// <param name="Address">Image à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenImageViewerPopup ( Uri Address )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				this.ImageViewerPopup = new ImageViewerPopup ( Address );

				this.ImageViewerPopupContainer.Child      = this.ImageViewerPopup;
				this.ImageViewerPopupContainer.Visibility = Visibility.Visible;

				this.UpdadeApplicationBarIconButton ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ferme la Popup de visualisation des Images.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void CloseImageViewerPopup ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ImageViewerPopupContainer.Visibility = Visibility.Collapsed;

			this.ImageViewerPopup.Close ();

			this.ImageViewerPopupContainer.Child = null;
			this.ImageViewerPopup                = null;

			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des Sections
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre la Popup de visualisation des Images.
		/// </summary>
		/// <param name="Address">Image à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenSectionsPopup ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				this.SectionsPopup = new SectionsPopup ( (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					var Arguments = A as ObjectEventArgs<SectionType>;

					if ( Arguments != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( this.PageNavigator.IsLast ( Arguments.Self ) )
							{
							//---------------------------------------------------------------------------------------------------
							this.ApplicationBar.Suspend ();

							this.CloseSectionsPopup (                       );
							this.Navigate           ( false, Arguments.Self );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							this.ApplicationBar.Suspend ();

							this.CloseSectionsPopup (                      );
							this.Navigate           ( true, Arguments.Self );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						this.Dispatcher.BeginInvoke ( () =>
							{
							//---------------------------------------------------------------------------------------------------
							Instance.RootFrame.Navigate ( new Uri ( "/Frames/Frm_Options.xaml", UriKind.Relative ) );
							//---------------------------------------------------------------------------------------------------
							} );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.SectionsPopupContainer.Child      = this.SectionsPopup;
				this.SectionsPopupContainer.Visibility = Visibility.Visible;

				this.UpdadeApplicationBarIconButton ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ferme la Popup de visualisation des Images.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void CloseSectionsPopup ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.SectionsPopupContainer.Visibility = Visibility.Collapsed;
			this.SectionsPopupContainer.Child      = null;
			this.SectionsPopup                     = null;

			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des ApplicationBarIconButton
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Reflète l'état de la page en cours sur les Icons en bas.
		/// </summary>
		/// <param name="ReloadApplicationButtons">Indique s'il faut tout recharger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void UpdadeApplicationBarIconButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.BottomAppBar.Height = ( Instance.ExpandMenu ) ? DeviceInfos.ApplicationBarHeight : 
			                                                     DeviceInfos.MinimizedApplicationBarHeight;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.ImageViewerPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				SystemTray.IsVisible = false;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot    .DisableSlide  = true;
				this.ApplicationBar.IsMenuEnabled = false;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.ApplicationBar.SetButtons ( ApplicationBarMode.Default, this.CloseImageViewerAppBarButton );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.SectionsPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( DeviceInfos.Version == WindowsPhoneVersion.WP81 )
					SystemTray.IsVisible = true;
				else
					SystemTray.IsVisible = (DeviceInfos.Orientation == PhoneOrientation.Portrait);
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot    .DisableSlide  = true;
				this.ApplicationBar.IsMenuEnabled = false;

				this.ApplicationBar.SetButtons ( ApplicationBarMode.Default, this.CloseSectionsAppBarButton );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( DeviceInfos.Version == WindowsPhoneVersion.WP81 )
					SystemTray.IsVisible = true;
				else
					SystemTray.IsVisible = (DeviceInfos.Orientation == PhoneOrientation.Portrait);
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot.DisableSlide = false;

				ApplicationBarMode Mode = ( Instance.ExpandMenu ) ? ApplicationBarMode.Default : 
				                                                    ApplicationBarMode.Minimized;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				object CurrentObject = this.PageNavigator.Last;

				if ( CurrentObject == null ) CurrentObject = SectionType.All;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// C'est un Article
				//---------------------------------------------------------------------------------------------------------------
				if ( CurrentObject is Article )
					{
					//-----------------------------------------------------------------------------------------------------------
					Article Item = (Article)CurrentObject;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					switch ( Item.Type )
						{
						//-------------------------------------------------------------------------------------------------------
						case ArticleType.Article :
						case ArticleType.Test    :
						case ArticleType.Folder  :
							{
							//---------------------------------------------------------------------------------------------------
							if ( ! Item.IsMarked && string.IsNullOrEmpty ( Item.Title ) )
								{
								//-----------------------------------------------------------------------------------------------
								this.ShareAppBarButton     .IsEnabled = false;
								this.BookmarkInAppBarButton.IsEnabled = false;
								this.ViewOnlineAppBarMenu  .IsEnabled = false;

								this.ApplicationBar.SetButtons ( Mode                       , 
														         this.ReturnAppBarButton    , 
														         this.ShareAppBarButton     , 
														         this.BookmarkInAppBarButton, 
														         this.RefreshAppBarButton   );
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( ! Item.IsMarked )
								{
								//-----------------------------------------------------------------------------------------------
								this.ShareAppBarButton     .IsEnabled = true;
								this.BookmarkInAppBarButton.IsEnabled = true;
								this.ViewOnlineAppBarMenu  .IsEnabled = ( Item.Uri != null );

								this.ApplicationBar.SetButtons ( Mode                       , 
														         this.ReturnAppBarButton    , 
														         this.ShareAppBarButton     , 
														         this.BookmarkInAppBarButton, 
														         this.RefreshAppBarButton   );
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else
								{
								//-----------------------------------------------------------------------------------------------
								this.ShareAppBarButton   .IsEnabled = true;
								this.ViewOnlineAppBarMenu.IsEnabled = ( Item.Uri != null );

								this.ApplicationBar.SetButtons ( Mode                        , 
														         this.ReturnAppBarButton     , 
														         this.ShareAppBarButton      , 
														         this.BookmarkOutAppBarButton, 
														         this.RefreshAppBarButton    );
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							this.ApplicationBar.IsMenuEnabled = true;
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							break;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						case ArticleType.Search  :
						case ArticleType.Other   :
							{
							//---------------------------------------------------------------------------------------------------
							this.ApplicationBar.IsMenuEnabled = false;
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							this.ApplicationBar.SetButtons ( Mode                     , 
														     this.SectionAppBarButton , 
														     this.ReturnAppBarButton  );
							break;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// C'est une Section
				//---------------------------------------------------------------------------------------------------------------
				else if ( CurrentObject is SectionType )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.IsMenuEnabled = false;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ((SectionType)CurrentObject) == SectionType.All )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplicationBar.SetButtons ( Mode                     , 
														 this.PinAppBarButton     ,
														 this.RefreshAppBarButton );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplicationBar.SetButtons ( Mode                     , 
														 this.HomeAppBarButton    , 
														 this.PinAppBarButton     ,
														 this.RefreshAppBarButton );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// On ne sait pas ce que c'est :/
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.IsMenuEnabled = false;

					this.ApplicationBar.SetButtons ( Mode, this.RefreshAppBarButton );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton <b>Menu</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnToggleMenuButtonClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.SectionsPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CloseSectionsPopup ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.LayoutRoot.SelectedPanel == SlidePanel.Left )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot.SelectedPanel = SlidePanel.Center;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Instance.PanelMode == PanelMode.Popup )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.OpenSectionsPopup  ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else { this.LayoutRoot.SelectedPanel = SlidePanel.Left; }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton <b>rechercher</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnSearchButtonClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string SearchUri = "https://m.nextinpact.com/rechercher?term=";

			this.Navigate ( true, Article.Parse ( new Uri ( SearchUri ) ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "accueil".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnHomeButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			object CurrentObject = this.PageNavigator.Last;

			if ( CurrentObject != null )
				{
				if ( CurrentObject is SectionType )
					{
					this.Navigate ( true, SectionType.All );
					}
				else
					{
					this.Navigate ( true, this.CurrentSection );
					}
				}
			else { this.Navigate ( true, SectionType.All ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "épingler".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnPinButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				object LastObject = this.PageNavigator.Last;

				if ( LastObject is SectionType )
					{
					//-----------------------------------------------------------------------------------------------------------
					SectionType Section = (SectionType)LastObject;

					Uri Uri = new Uri ( "/Frames/Frm_Home.xaml?Section=" + Section.ToString (), 
					                                                            UriKind.Relative );

					ShellTile.Create ( Uri, ScheduledAgent.GetTileData ( Uri ), true );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "section".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnSectionButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			object CurrentObject = this.PageNavigator.Last;

			if ( CurrentObject != null )
				{
				if ( CurrentObject is SectionType )
					{
					this.Navigate ( true, SectionType.All );
					}
				else
					{
					this.Navigate ( true, this.CurrentSection );
					}
				}
			else { this.Navigate ( true, SectionType.All ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnReturnButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PageNavigator.CanGoBack ) this.GoBack ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "partager".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnShareButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Article Item = this.PageNavigator.Last as Article;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Item != null && ! Item.IsEmpty )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Uri   = Item.Uri.OriginalString;
				string Title = Item.Title;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ! string.IsNullOrEmpty ( Title ) && ! string.IsNullOrEmpty ( Uri ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					Uri = Uri.Replace ( "m.nextinpact", "www.nextinpact" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						(new ShareLinkTask ()
							{
							LinkUri = new Uri                ( Uri   ),
							Title   = HttpUtility.HtmlDecode ( Title ),
							Message = string.Empty                  }).Show ();
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch {}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnBookmarkInButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Item = this.PageNavigator.Last as Article;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Item != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var B = AppBookmarks.GetForApplication () )
						{
						B.Add<Bookmark> ( Item.BookmarkID, Item.Bookmark );
						}

					Item.IsMarked = true;

					this.UpdadeApplicationBarIconButton ();
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					SystemTray.ProgressIndicator = new ProgressIndicator ()
						{
						IsIndeterminate = false                  ,
						IsVisible       = true                   ,
						Text            = "élément sauvegardé...",
						};

					this.Dispatcher.Async ( () =>
						{
						this.Dispatcher.BeginInvoke ( new Action ( () => 
							                    { SystemTray.ProgressIndicator = null; } ) );
						}, 1500 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnBookmarkOutButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Item = this.PageNavigator.Last as Article;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Item != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					CustomMessageBox MessageBox = new CustomMessageBox ()
						{
						Caption            = "Retirer des favoris ?",
						Message            = Item.Title             ,
						LeftButtonContent  = "oui"                  ,
						RightButtonContent = "non"                  ,
						};
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					MessageBox.Dismissed += (S, A) =>
						{
						//-------------------------------------------------------------------------------------------------------
						if ( A.Result == CustomMessageBoxResult.LeftButton )
							{
							//---------------------------------------------------------------------------------------------------
							using ( var B = AppBookmarks.GetForApplication () )
								{
								B.Remove ( Item.BookmarkID );
								}

							Item.IsMarked = false;

							this.UpdadeApplicationBarIconButton ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						};
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					MessageBox.Show ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "visualiser en ligne".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnViewOnlineMenuClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Article Item = this.PageNavigator.Last as Article;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Item != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Uri = Item.Uri.OriginalString;

				if ( ! string.IsNullOrEmpty ( Uri ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					Uri = Uri.Replace ( "m.nextinpact", "www.nextinpact" );

					try { ( new WebBrowserTask () { Uri = new Uri ( Uri ) } ).Show (); } catch {}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCloseImageViewerButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.CloseImageViewerPopup ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCloseSectionsButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.CloseSectionsPopup ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "recharger".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnRefreshButtonClick ( object Sender, EventArgs Args ) { this.Refresh (); }
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Propriété => IsIndeterminate
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Contrôle la barre de progression.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private bool IsIndeterminate
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return ( this.ProgressBar.IsIndeterminate ); }
			//-------------------------------------------------------------------------------------------------------------------
			set
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LeftProgressBar .IsIndeterminate = value;
				this.ProgressBar     .IsIndeterminate = value;
				this.RightProgressBar.IsIndeterminate = value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton précédent.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler<CancelEventArgs> BeginBackKeyPress;
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextInpact"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
