//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : RestService.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet RestService
// Créé le       : 24/02/2015
// Modifié le    : 04/07/2018
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Web;
using System.Text;
using System.Threading;
using System.Globalization;
using System.ComponentModel;
using System.IO.IsolatedStorage;
using System.Windows.Navigation;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Security.Cryptography;
using System.Windows.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Info;
using Microsoft.Phone.Tasks;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Net.NetworkInformation;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using SharpCompress.Reader;
using SharpCompress.Archive.SevenZip;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using NextInpact.Service.Resources;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextInpact.Service"
//*******************************************************************************************************************************
namespace NextInpact.Service
	{
	
	//  ####   #####   ####  #####          ###   #      #  #####  #   #  #####
	//  #   #  #      #        #           #   #  #      #  #      ##  #    #  
	//  ####   ###     ###     #    #####  #      #      #  ###    # # #    #  
	//  #   #  #          #    #           #   #  #      #  #      #  ##    #  
	//  #   #  #####  ####     #            ###   #####  #  #####  #   #    #  
	
	//***************************************************************************************************************************
	// Classe RestService
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet l'appel aux procédures du Service-Web.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class RestService
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private static WebBrowser CookieBrowser = null;
		private static bool       Initialized   = false;
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//-----------------------------------------------------------------------------------------------------------------------
		private const string FixHeader = "\n"                      +
			"<base href=\"https://m.nextinpact.com\" />\n"         +
			"<style type='text/css'>"                              +
			 "iframe,img {max-width:308px;height:auto !IMPORTANT}" +
			 "#container_keyword {width: 120px !IMPORTANT}"        +
			 "#container_keyword > input {width: 95px !IMPORTANT}" +
			 "#header {display: none !IMPORTANT}"                  +
			 ".top-footer {display: none !IMPORTANT}"              +
			 ".footer-newsletter {display: none !IMPORTANT}"       +
			 "</style>\n";
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identification unique de la page source.
		/// </summary>
		/// <param name="Source">Uri de la page.</param>
		/// <returns>identifiant unique.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ArticleToFile ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string Host         = Article.Uri.Host;
			string PathAndQuery = Article.Uri.PathAndQuery;

			if ( ! string.IsNullOrEmpty ( PathAndQuery ) && PathAndQuery.Length > 1 )
				{
				if ( PathAndQuery.StartsWith ( "/" ) ) Host +=       PathAndQuery;
				else                                   Host += "/" + PathAndQuery;
				}

			return System.Net.HttpUtility.UrlEncode ( Host ).ToUpper ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Document">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string FixContent ( string Document )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			StringBuilder Content = new StringBuilder ( Document );

			for ( int Index = 0 ; Index < Content.Length ; Index ++ )
				{
				//---------------------------------------------------------------------------------------------------------------
				char Car = Content[Index];
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Car == '<' )
					{
					//-----------------------------------------------------------------------------------------------------------
					// '<head>'
					//-----------------------------------------------------------------------------------------------------------
					if ( Content[Index + 1] == 'h' && Content[Index + 2] == 'e' && 
					     Content[Index + 3] == 'a' && Content[Index + 4] == 'd' && 
						 Content[Index + 5] == '>' )
						{
						Content.Insert ( Index + 6, FixHeader );
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Document = Content.ToString ();
			
			return Document;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de la Section.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string SectionToFile ( SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "Section-" + ((int)Type).ToString ().ToUpper () + ".HTM";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
				
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du 'POST'
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Délégate utilisé pour avertir de la réception des données
		//-----------------------------------------------------------------------------------------------------------------------
		private delegate void UploadBitsCallback ( UploadBitsState Args );
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Classe UploadBitsState
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet le traitement d'une demande POST
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private class UploadBitsState
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private RestEventHandler OnComplete;
			private AsyncOperation   AsyncOperation;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>UploadBitsState</b>.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public UploadBitsState ( RestEventHandler   OnComplete, 
									 UploadBitsCallback Callback  )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.OnComplete      = OnComplete;
				this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.Callback       = Callback;
				this.Cookies        = new NameValueCollection ();
				this.Document       = string.Empty;
				this.Exception      = null;
				this.Stream         = null;
				this.Response       = null;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( Uri ProxyAccessRequestUri )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.PostAnomaly ( RestRequestResult.ProxyAccessRequest );

				try
					{
					//-----------------------------------------------------------------------------------------------------------
					Instance.RootFrame.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							(new WebBrowserTask () { Uri = ProxyAccessRequestUri }).Show ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( null, string.Empty, Error );

						this.OnComplete ( null, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostOperationComplete ( string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( null, string.Empty, Content );

						this.OnComplete ( null, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public UploadBitsCallback Callback { get; private set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public NameValueCollection Cookies { get; set; }
			//*******************************************************************************************************************
		
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public string Document { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public Exception Exception { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebResponse Response { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public Stream Stream { get; set; }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une requête de type POST
		/// </summary>
		/// <param name="Path">Chemin de la page à charger.</param>
		/// <param name="OnComplete">Est appelé à la fin du traitement.</param>
		/// <param name="Callback">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void UploadBits ( string              Path       ,  
		                                 NameValueCollection QueryString,
		                                 RestEventHandler    OnComplete , 
										 UploadBitsCallback  Callback   )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest Request = RestWebRequest.Create ();

			Request.Headers["User-Agent"     ] = DeviceInfos.UserAgent;
			Request.Headers["AppDeck-App-Key"] = "224h315e5a19e0865b35ac7e5b3713ef5a3b";
			Request.Headers["AppDeck-User-ID"] = RestService.AppDeckUserID;

			if ( ! string.IsNullOrEmpty ( RestService.ArrAffinity ) )
				Request.Cookies.Add ( "ARRAffinity", RestService.ArrAffinity );

			if ( ! string.IsNullOrEmpty ( RestService.InpactStore ) )
				Request.Cookies.Add ( "inpactstore", RestService.InpactStore );

			if ( QueryString != null )
				foreach ( KeyValuePair<string, string> Item in QueryString )
					{ Request.QueryString[Item.Key] = Item.Value; }

			var AsyncState = new UploadBitsState ( OnComplete, Callback );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				UploadBitsState State = Args.UserToken as UploadBitsState;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Stream    = Args.Stream;
					State.Exception = Args.Exception;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Stream != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Stream.CanRead )
							{
							//---------------------------------------------------------------------------------------------------
							State.Cookies = new NameValueCollection ( Request.Cookies );
							
							if ( State.Cookies.ContainsKey ( "ARRAffinity" ) )
								RestService.ArrAffinity = State.Cookies["ARRAffinity"];
							
							if ( State.Cookies.ContainsKey ( "inpactstore" ) )
								RestService.InpactStore = State.Cookies["inpactstore"];
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							using ( StreamReader Sr = new StreamReader ( Args.Stream ) )
								{
								State.Document = Sr.ReadToEnd ();
								}

							State.Callback ( State );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Exception != null )
						{
						//-------------------------------------------------------------------------------------------------------
						RestRequestResult Result = RestRequestResult.ServiceUnavailable;
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Exception is WebException )
							{
							//---------------------------------------------------------------------------------------------------
							WebException Exception = Args.Exception as WebException;
							//---------------------------------------------------------------------------------------------------
					
							//---------------------------------------------------------------------------------------------------
							if ( Exception.Response is HttpWebResponse )
								{
								HttpWebResponse Response = Exception.Response as HttpWebResponse;

								if ( Response.StatusCode == HttpStatusCode.NotFound )
									Result = RestRequestResult.NotFound;
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						State.PostAnomaly ( Result );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Args.IsRedirected )
						{ State.PostAnomaly ( RestRequestResult.ServiceUnavailable ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch { State.PostAnomaly ( RestRequestResult.ServiceUnavailable ); }
				//---------------------------------------------------------------------------------------------------------------
				}, new Uri ( Path ), AsyncState );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du 'GET'
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Délégate utilisé pour avertir de la réception des données
		//-----------------------------------------------------------------------------------------------------------------------
		private delegate void DownloadBitsCallback ( DownloadBitsState Args );
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Classe DownloadBitsState
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet le traitement d'une demande GET
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private class DownloadBitsState
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private object           AssociateObject;
			private AppCacheFile     CacheFile;
			private RestEventHandler OnComplete;
			private AsyncOperation   AsyncOperation;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>DownloadBitsState</b>.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsState ( object               AssociateObject, 
			                           AppCacheFile         CacheFile      , 
			                           object               UserToken      , 
									   RestEventHandler     OnComplete     , 
									   DownloadBitsCallback Callback       )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AssociateObject = AssociateObject;
				this.CacheFile       = CacheFile;
				this.OnComplete      = OnComplete;
				this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.Callback       = Callback;
				this.Cookies        = new NameValueCollection ();
				this.Document       = string.Empty;
				this.Exception      = null;
				this.Stream         = null;
				this.Request        = null;
				this.Response       = null;
				this.UserToken      = UserToken;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens la page web correspondante à l'anomalie.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			private string GetErrorContent ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string Content = SR.GetResource ( "Global", "404.html" );

				string P1 = string.Empty;
				string P2 = string.Empty;
				string P3 = string.Empty;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( Error )
					{
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.EmptyResponse      : 
						P1 = "EMPTY_RESPONSE"      ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InvalideFormat     : 
						P1 = "INVALIDE_FORMAT"     ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.PartialContent     : 
						P1 = "PARTIAL_CONTENT"     ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Forbidden          : 
						P1 = "FORBIDDEN"           ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.NotFound           : 
						P1 = "NOT_FOUND"           ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Timeout            : 
						P1 = "TIMEOUT"             ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Unauthorized       : 
						P1 = "UNAUTHORIZED_ACCESS" ; P2 = "block"; P3 = "none" ; break;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InternalException  : 
						P1 = "INTERNAL_EXCEPTION"  ; P2 = "none" ; P3 = "block"; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ProxyAccessRequest : Content = 
						P1 = "PROXY_ACCESS_REQUEST"; P2 = "none" ; P3 = "block"; break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ServiceUnavailable : 
						P1 = "SERVICE_UNAVAILABLE" ; P2 = "none" ; P3 = "block"; break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( FontSize )	
					{
					case 14 : return string.Format ( Content, 14, 16, 10, 12, P1, P2, P3 );
					case 18 : return string.Format ( Content, 18, 20, 14, 16, P1, P2, P3 );
					default : return string.Format ( Content, 16, 18, 12, 14, P1, P2, P3 );
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( Uri ProxyAccessRequestUri )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.PostAnomaly ( RestRequestResult.ProxyAccessRequest );

				try
					{
					//-----------------------------------------------------------------------------------------------------------
					Instance.RootFrame.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							(new WebBrowserTask () { Uri = ProxyAccessRequestUri }).Show ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! this.CacheFile.IsEmpty )
							{
							//---------------------------------------------------------------------------------------------------
							var E = new RestEventArgs ( this.AssociateObject  , 
							                            this.CacheFile.Name   , 
							                            this.CacheFile.Content );

							this.OnComplete ( null, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							string Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, string.Empty, 
							                                                             Content );
							this.OnComplete ( null, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostCallback ( SendOrPostCallback Callback )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( Callback, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostOperationComplete ( string File, string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( this.AssociateObject, File, Content );

						this.OnComplete ( null, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsCallback Callback { get; private set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public NameValueCollection Cookies { get; set; }
			//*******************************************************************************************************************
		
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public string Document { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public Exception Exception { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebRequest Request { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebResponse Response { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public Stream Stream { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public object UserToken { get; private set; }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une requête de type GET
		/// </summary>
		/// <param name="Path">Chemin de la page à charger.</param>
		/// <param name="OnComplete">Est appelé à la fin du traitement.</param>
		/// <param name="Callback">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void DownloadBits ( object               AssociateObject,
		                                   string               Path           ,  
										   int                  TimeOut        ,
										   AppCacheFile         CacheFile      ,
		                                   object               UserToken      , 
		                                   RestEventHandler     OnComplete     , 
										   DownloadBitsCallback Callback       )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest Request = RestWebRequest.Create ();

			Request.UseCompression = RestService.UseCompression;

			Request.TimeOut = TimeOut;

			Request.Headers["User-Agent"     ] = DeviceInfos.UserAgent;
			Request.Headers["AppDeck-App-Key"] = "224h315e5a19e0865b35ac7e5b3713ef5a3b";
			Request.Headers["AppDeck-User-ID"] = RestService.AppDeckUserID;

			if ( ! string.IsNullOrEmpty ( RestService.ArrAffinity ) )
				Request.Cookies.Add ( "ARRAffinity", RestService.ArrAffinity );

			if ( ! string.IsNullOrEmpty ( RestService.InpactStore ) )
				Request.Cookies.Add ( "inpactstore", RestService.InpactStore );

			var AsyncState = new DownloadBitsState ( AssociateObject, CacheFile, UserToken, 
			                                                                OnComplete, Callback );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				DownloadBitsState State = Args.UserToken as DownloadBitsState;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Stream    = Args.Stream;
					State.Request   = Args.Request;
					State.Response  = Args.Response;
					State.Exception = Args.Exception;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Stream != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Stream.CanRead )
							{
							//---------------------------------------------------------------------------------------------------
							State.Cookies = new NameValueCollection ( Request.Cookies );
							
							if ( State.Cookies.ContainsKey ( "ARRAffinity" ) )
								RestService.ArrAffinity = State.Cookies["ARRAffinity"];
							
							if ( State.Cookies.ContainsKey ( "inpactstore" ) )
								RestService.InpactStore = State.Cookies["inpactstore"];
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							using ( StreamReader Sr = new StreamReader ( Args.Stream ) )
								{
								State.Document = Sr.ReadToEnd ();
								}

							State.Callback ( State );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Exception != null )
						{
						//-------------------------------------------------------------------------------------------------------
						RestRequestResult Result = RestRequestResult.ServiceUnavailable;
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Exception is WebException )
							{
							//---------------------------------------------------------------------------------------------------
							WebException Exception = Args.Exception as WebException;
							//---------------------------------------------------------------------------------------------------
					
							//---------------------------------------------------------------------------------------------------
							if ( Exception.Response is HttpWebResponse )
								{
								//-----------------------------------------------------------------------------------------------
								HttpWebResponse Response = Exception.Response as HttpWebResponse;

								if ( Response.StatusCode == HttpStatusCode.Unauthorized )
									{
									Result = RestRequestResult.Unauthorized;
									}
								else if ( Response.StatusCode == HttpStatusCode.Forbidden )
									{
									Result = RestRequestResult.Forbidden;
									}
								else if ( Response.StatusCode == HttpStatusCode.NotFound )
									{
									Result = RestRequestResult.NotFound;
									}
								else if ( Response.StatusCode == HttpStatusCode.RequestTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								else if ( Response.StatusCode == HttpStatusCode.GatewayTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ReceiveFailure )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.EmptyResponse;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ProtocolError )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.NotFound;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( ! string.IsNullOrEmpty ( Exception.Message ) )
								{
								//-----------------------------------------------------------------------------------------------
								if ( Exception.Message.IndexOf ( "NotFound" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.NotFound;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								else if ( Exception.Message.IndexOf ( "Timeout" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.Timeout;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						State.PostAnomaly ( Result );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Args.IsRedirected )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Cancelled )
							State.PostAnomaly ( RestRequestResult.Timeout            );
						else
							State.PostAnomaly ( RestRequestResult.ServiceUnavailable );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.IsRedirected && Args.ResponseUri != null )
						{
						//-------------------------------------------------------------------------------------------------------
						string Uri1 = "https://m.nextinpact.com";
						string Uri2 = "https://forum.nextinpact.com";
						
						if ( ! Args.ResponseUri.OriginalString.StartsWith ( Uri1 ) )
							if ( ! Args.ResponseUri.OriginalString.StartsWith ( Uri2 ) )
								State.PostAnomaly ( Args.ResponseUri );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( IOException Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						// La taille de la réponse est de 0
						//-------------------------------------------------------------------------------------------------------
						if      ( Args.Response               == null )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						else if ( Args.Response.ContentLength <=    0 )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// On a été redirigé de force
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.ResponseUri != null )
							{
							//---------------------------------------------------------------------------------------------------
							string Uri1 = "https://m.nextinpact.com";
							string Uri2 = "https://forum.nextinpact.com";
						
							if ( ! Args.ResponseUri.OriginalString.StartsWith ( Uri1 ) )
								if ( ! Args.ResponseUri.OriginalString.StartsWith ( Uri2 ) )
									State.PostAnomaly ( Args.ResponseUri );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( Exception Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;

					State.PostAnomaly ( RestRequestResult.InternalException );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}, new Uri ( Path ), AsyncState );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Téléchargement du Cache
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>LoadPrefetch</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void LoadPrefetch ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			Uri Source = new Uri ( "https://m.nextinpact.com/prefetch.7z" );

			RestWebRequest Request = RestWebRequest.Create ();

			Request.UseCompression = false;

			Request.Headers["User-Agent"     ] = DeviceInfos.UserAgent;
			Request.Headers["AppDeck-App-Key"] = "224h315e5a19e0865b35ac7e5b3713ef5a3b";
			Request.Headers["AppDeck-User-ID"] = RestService.AppDeckUserID;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Exception == null && Args.Stream != null && Args.Stream.CanRead )
						{
						//-------------------------------------------------------------------------------------------------------
						using ( var Cache = AppWebCache.GetForApplication () )
							{
							using ( var Sz = SevenZipArchive.Open ( Args.Stream ) )
								{
								foreach ( var Entry in Sz.Entries )
									{
									string FileName = Entry.FilePath.ToUpper ();

									using ( Stream Sw = Entry.OpenEntryStream () )
										{
										using ( var St = new StreamReader 
											                         ( Entry.OpenEntryStream () ) )
											{
											Cache.Save ( FileName, FixContent 
												                             ( St.ReadToEnd () ) );
											}
										}
									}
								}
							}
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						LastPrefetch = DateTime.Now;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				}, Source, null );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Enregistrement de l'App
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		/// <param name="Action">Est appelé à la fin de l'initialisation.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void RegisterApp ( Action Action )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Uri Source = new Uri ( "https://m.nextinpact.com/images/common/ajax-loader.gif" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On a pas de connexion, on va fonctionner en mode déconnecté
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! NetworkInterface.GetIsNetworkAvailable () ) { Action (); }
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On a une connexion, on tente de charger l'image
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! Initialized && CookieBrowser == null )
				{
				//---------------------------------------------------------------------------------------------------------------
				AsyncOperation AsyncOperation = AsyncOperationManager.CreateOperation ( null );

				CookieBrowser = new WebBrowser ();
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Initialisation réussie
				//---------------------------------------------------------------------------------------------------------------
				CookieBrowser.Navigated += (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( string.IsNullOrEmpty ( RestService.ArrAffinity ) )
						{
						foreach ( Cookie Cookie in CookieBrowser.GetCookies () )
							{
							if (Cookie.Name == "ARRAffinity")
								RestService.ArrAffinity = Cookie.Value;
							}
						}
					else { CookieBrowser.SetCookie ( "ARRAffinity", RestService.ArrAffinity, "m.nextinpact.com" ); }

					CookieBrowser.SetCookie ( "inpactstore", RestService.InpactStore, "m.nextinpact.com" );
					
					object FontSize = CookieBrowser.Eval ("localStorage.getItem('.actu_content')");

					if ( FontSize != null )
						RestService.FontSize = FontSize.ToString ().ToInteger ();
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					Initialized = true;

					AsyncOperation.PostOperationCompleted ( ( _ ) => { Action (); }, null );
					//-----------------------------------------------------------------------------------------------------------
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Initialisation échouée
				//---------------------------------------------------------------------------------------------------------------
				CookieBrowser.NavigationFailed += (S, A) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					CookieBrowser = null;

					AsyncOperation.PostOperationCompleted ( ( _ ) => { Action (); }, null );
					//-----------------------------------------------------------------------------------------------------------
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				CookieBrowser.Navigate ( Source );

				LastPrefetch = DateTime.MinValue;

				if ( DateTime.Now.Subtract ( LastPrefetch ).TotalMinutes > 120 ) LoadPrefetch ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // POST => Procédure ConnectLogin
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>ConnectLogin</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncConnectLogin ( RestEventHandler OnComplete, string UserName, string Password )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			AsyncOperation Async = AsyncOperationManager.CreateOperation ( null );

			string Path = "https://m.nextinpact.com/Account/LogOnApp";

			NameValueCollection QueryString = new NameValueCollection ();

			QueryString["UserName"] = UserName;
			QueryString["Password"] = Password;
			
			UploadBits ( Path, QueryString, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				AppWebCache.Clear ();

				Async.PostOperationCompleted ( (_) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					CookieBrowser.SetCookie ( "ARRAffinity", RestService.ArrAffinity, "m.nextinpact.com" );

					CookieBrowser.SetCookie ( "inpactstore", RestService.InpactStore, "m.nextinpact.com" );

					State.PostOperationComplete ( State.Document );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Connecte l'utilisateur.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		/// <param name="UserName">Nom du compte.</param>
		/// <param name="Password">Mot de passe.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void ConnectLogin ( RestEventHandler OnComplete, string UserName, 
		                                                                          string Password )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Est pas initialisé ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( () => { AsyncConnectLogin ( OnComplete, UserName, Password ); } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncConnectLogin ( OnComplete, UserName, Password ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // POST => Procédure DisconnectLogin
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>DisconnectLogin</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncDisconnectLogin ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			AsyncOperation Async = AsyncOperationManager.CreateOperation ( null );

			string Path = "https://m.nextinpact.com/Account/LogOffApp";
			
			UploadBits ( Path, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				AppWebCache.Clear ();

				RestService.ArrAffinity = string.Empty;
				RestService.InpactStore = string.Empty;

				Async.PostOperationCompleted ( (_) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					CookieBrowser.SetCookie ( "ARRAffinity", RestService.ArrAffinity, "m.nextinpact.com" );

					CookieBrowser.SetCookie ( "inpactstore", RestService.InpactStore, "m.nextinpact.com" );

					State.PostOperationComplete ( State.Document );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Déconnecte l'utilisateur.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void DisconnectLogin ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Est pas initialisé ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( () => { AsyncDisconnectLogin ( OnComplete ); } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncDisconnectLogin ( OnComplete ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // POST => Procédure SetCommonOptions
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>SetCommonOptions</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncSetCommonOptions ( RestEventHandler OnComplete   , 
		                                           bool             Smiley       , 
		                                           bool             Picture      , 
		                                           int              Commentaries )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Path = "https://m.nextinpact.com/options/updateCommonOptions";

			NameValueCollection QueryString = new NameValueCollection ();

			QueryString["smileys"] = (( Smiley  ) ? "on" : "off" );
			QueryString["images" ] = (( Picture ) ? "on" : "off" );

			if      ( Commentaries == 50 ) QueryString["nbComm"] = "50";
			else if ( Commentaries == 20 ) QueryString["nbComm"] = "20";
			else                           QueryString["nbComm"] = "10";
			
			UploadBits ( Path, QueryString, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( State.Document );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Définit les options de l'utilisateur.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void SetCommonOptions ( RestEventHandler OnComplete   , 
		                                      bool             Smiley       , 
		                                      bool             Picture      , 
		                                      int              Commentaries )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Est pas initialisé ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( () =>
					{
					//-----------------------------------------------------------------------------------------------------------
					AsyncSetCommonOptions ( OnComplete, Smiley, Picture, Commentaries );
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncSetCommonOptions ( OnComplete, Smiley, Picture, Commentaries ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // POST => Procédure SetFontSize
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Définit les options de l'utilisateur.
		/// </summary>
		/// <param name="FontSize">Taille du texte.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void SetFontSize ( int FontSize )
			{
			//-------------------------------------------------------------------------------------------------------------------
			RestService.FontSize = FontSize;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Est pas initialisé ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( Initialized && CookieBrowser != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				CookieBrowser.Eval ( string.Format ( "localStorage.setItem ('.actu_content', '{0}')", FontSize ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // POST => Procédure SetLoggonOptions
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>SetLoggonOptions</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncSetLoggonOptions ( RestEventHandler OnComplete, bool Commentaries )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Path = "https://m.nextinpact.com/options/updateLoggedOptions";

			NameValueCollection QueryString = new NameValueCollection ();

			QueryString["affComm"] = (( Commentaries ) ? "on" : "off" );

			UploadBits ( Path, QueryString, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( State.Document );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Définit les options de l'utilisateur.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void SetLoggonOptions ( RestEventHandler OnComplete, bool Commentaries )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Est pas initialisé ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( () => { AsyncSetLoggonOptions ( OnComplete, Commentaries ); } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncSetLoggonOptions ( OnComplete, Commentaries ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetAccount
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le contenue de la page demandée.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		/// <param name="AllowCache">Cache possible ?</param>
		/// <param name="Source">Page à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetAccount ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string Path = "https://m.nextinpact.com/Options/AppPanel";
			
			DownloadBits ( null, Path, 20, AppCacheFile.Empty, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( string.Empty, State.Document );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetContent - Mode Article
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetContent</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncGetContent ( RestEventHandler OnComplete, bool AllowCache, Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			int Delay = 30;

			switch ( Article.Type )
				{
				case ArticleType.Article : Delay =  600; break;
				case ArticleType.Folder  : 
				case ArticleType.Test    : Delay = 7200; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = DateTime.Now.AddMinutes ( -Delay  );
			string       FileName   = ArticleToFile           ( Article );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( FileName, ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article.IsMarked = AppBookmarks.IsMarked ( Article.BookmarkID );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				int TsIndex = Entry.Content.IndexOf ( "<title>"  );
				int TeIndex = Entry.Content.IndexOf ( "</title>" );

				if ( TsIndex > -1 && TeIndex > TsIndex )
					Article.Title = HttpUtility.HtmlDecode ( Entry.Content.Substring 
					                                      ( TsIndex + 7, TeIndex - TsIndex - 7 ) );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				var E = new RestEventArgs ( Article, Entry.Name, Entry.Content );

				OnComplete ( null, E );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				string Path = Article.Uri.OriginalString;

				DownloadBits ( Article, Path, 20, Entry, null, OnComplete, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var Cache = AppWebCache.GetForApplication () )
						{
						//-------------------------------------------------------------------------------------------------------
						Article.IsMarked = AppBookmarks.IsMarked ( Article.BookmarkID );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						int TsIndex = State.Document.IndexOf ( "<title>"  );
						int TeIndex = State.Document.IndexOf ( "</title>" );

						if ( TsIndex > -1 && TeIndex > TsIndex )
							Article.Title = HttpUtility.HtmlDecode ( State.Document.Substring 
					                                      ( TsIndex + 7, TeIndex - TsIndex - 7 ) );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						string Content = FixContent ( State.Document );

						var NewEntry = Cache.Save ( FileName, FixContent ( State.Document ) );

						State.PostOperationComplete ( NewEntry.Name, NewEntry.Content );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le contenue de la page demandée.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		/// <param name="AllowCache">Cache possible ?</param>
		/// <param name="Article">Objet à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetContent ( RestEventHandler OnComplete, bool AllowCache, Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// L'objet est invalide
			//-------------------------------------------------------------------------------------------------------------------
			if ( Article.IsEmpty )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Content = SR.GetResource ( "Global", "404.html" );

				switch ( FontSize )
					{
					case 14 : Content = 
						string.Format ( Content, 14, 16, 10, 12, "NOT_FOUND" ); break;
					case 18 : Content = 
						string.Format ( Content, 18, 20, 14, 16, "NOT_FOUND" ); break;
					default : Content = 
						string.Format ( Content, 16, 18, 12, 14, "NOT_FOUND" ); break;
					}

				var E = new RestEventArgs ( Article, string.Empty, Content );

				OnComplete ( null, E );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( () => { AsyncGetContent ( OnComplete, AllowCache, Article ); } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetContent ( OnComplete, AllowCache, Article ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetBookmarks
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetBookmarks ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetBookmarks", "Page.html" );
			string ItemHtml = SR.GetResource ( "GetBookmarks", "Item.html" );

			string Content = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			using ( var Bookmarks = AppBookmarks.GetForApplication () )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Items = Bookmarks.GetEnumerator<Bookmark> ();
				
				foreach ( var ItemKey in Items.Keys )
					{
					//-----------------------------------------------------------------------------------------------------------
					Bookmark Bookmark  = ItemKey;
					DateTime ToAddDate = Items[ItemKey];

					Content += string.Format ( ItemHtml, Bookmark.Uri                         , 
					                                     Bookmark.Title                       , 
														 ToAddDate.ToString ( "dd MMMM yyyy" ), 
														 ToAddDate.ToString ( "HH:mm"        ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = SR.GetResource ( "GetBookmarks", "404.html" );

				switch ( FontSize )	
					{
					case 14 : Content = string.Format ( Content, 14, 16 ); break;
					case 18 : Content = string.Format ( Content, 18, 20 ); break;
					default : Content = string.Format ( Content, 16, 18 ); break;
					}

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, string.Empty, 
				                                                                       Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( FontSize )
					{
					case 14 : Content = string.Format ( PageHtml, 14, 16, 10, 12, Content ); break;
					case 18 : Content = string.Format ( PageHtml, 18, 20, 14, 16, Content ); break;
					default : Content = string.Format ( PageHtml, 16, 18, 12, 14, Content ); break;
					}

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, string.Empty, 
				                                                                       Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetContent - Mode SectionType
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetContent</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncGetContent ( RestEventHandler OnComplete, bool AllowCache, SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = DateTime.Now.AddMinutes ( -15 );
			string       FileName   = SectionToFile ( Type );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( FileName, ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				var E = new RestEventArgs ( Type, Entry.Name, Entry.Content );

				OnComplete ( null, E );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				string Path = "https://m.nextinpact.com";

				switch ( Type )
					{
					case SectionType.Culture   : 
						Path = "https://m.nextinpact.com?cat=7";       break;
					case SectionType.Law       : 
						Path = "https://m.nextinpact.com?cat=5";       break;
					case SectionType.Economy   : 
						Path = "https://m.nextinpact.com?cat=6";       break;
					case SectionType.Internet  : 
						Path = "https://m.nextinpact.com?cat=3";       break;
					case SectionType.Software  : 
						Path = "https://m.nextinpact.com?cat=2";       break;
					case SectionType.Hardware  : 
						Path = "https://m.nextinpact.com?cat=1";       break;
					case SectionType.Mobility  : 
						Path = "https://m.nextinpact.com?cat=4";       break;
					case SectionType.Drafting  : 
						Path = "https://m.nextinpact.com?cat=8";       break;
					case SectionType.Tests     : 
						Path = "https://m.nextinpact.com/tests";       break;
					case SectionType.Folders   : 
						Path = "https://m.nextinpact.com/dossiers";    break;
					case SectionType.GoodDeals : 
						Path = "https://m.nextinpact.com/bons-plans";  break;
					case SectionType.Forum     : 
						Path = "https://forum.nextinpact.com";           break;
					case SectionType.Shoutbox  : 
						Path = "https://forum.nextinpact.com/shoutbox/"; break;
					}

				DownloadBits ( Type, Path, 20, Entry, null, OnComplete, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var Cache = AppWebCache.GetForApplication () )
						{
						//-------------------------------------------------------------------------------------------------------
						string Content = FixContent ( State.Document );

						var NewEntry = Cache.Save ( FileName, FixContent ( State.Document ) );

						State.PostOperationComplete ( NewEntry.Name, NewEntry.Content );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le contenue de la page demandée.
		/// </summary>
		/// <param name="OnComplete">Est appelé à la fin de l'appel.</param>
		/// <param name="AllowCache">Cache possible ?</param>
		/// <param name="Type">Section à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetContent ( RestEventHandler OnComplete, bool AllowCache, SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( () => { AsyncGetContent ( OnComplete, AllowCache, Type ); } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetContent ( OnComplete, AllowCache, Type ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> ArrAffinity
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Obtiens l'identifiant de session courante.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static string ArrAffinity
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "cookie-arr-affinity", string.Empty ); }
			set {        StorageSettings.SetValue ( "cookie-arr-affinity", value        ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // >> AppDeckUserID
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Obtiens l'identifiant unique de l'utilisateur.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static string AppDeckUserID
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				string appDeckUserID = StorageSettings.GetValue ( "app-deck-user-id", "" );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( appDeckUserID.Length != 36 )
					{
					//-----------------------------------------------------------------------------------------------------------
					appDeckUserID = string.Empty;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						byte[] UniqueId = (byte[])DeviceExtendedProperties.
						                                             GetValue ( "DeviceUniqueId" );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						for ( int Cpt = 0 ; Cpt < UniqueId.Length ; Cpt ++ )
							{
							string hex = string.Format ( "{0:x}", UniqueId [Cpt] );

							if ( hex.Length == 1 ) appDeckUserID += "0";

							appDeckUserID += hex;
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						appDeckUserID = Md5Encryptor.GetString ( appDeckUserID ).ToUpper ();
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch
						{
						//-------------------------------------------------------------------------------------------------------
						appDeckUserID = Md5Encryptor.GetString ( string.Format ( "{0} => {1}", 
							DateTime.Now.ToString ("yyyyMMddHHmmss"), new Guid ().ToString () ) ).ToUpper ();
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					appDeckUserID = string.Format ( "{0}-{1}-{2}-{3}-{4}", 
						appDeckUserID.Substring (  0,  8 ), 
						appDeckUserID.Substring (  8,  4 ), 
						appDeckUserID.Substring ( 12,  4 ), 
						appDeckUserID.Substring ( 16,  4 ), 
						appDeckUserID.Substring ( 20, 12 ) );

					AppDeckUserID = appDeckUserID;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return appDeckUserID;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			set { StorageSettings.SetValue ( "app-deck-user-id", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> FontSize
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Obtiens ou définit la taille du texte.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static int FontSize
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "font-size", 16 ); }
			set
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( value != 14 && value != 16 && value != 18 ) value = 16;
				
				StorageSettings.SetValue ( "font-size", value );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> InpactStore
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Obtiens l'identifiant de login de l'utilisateur.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static string InpactStore
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				string _InpactStore = StorageSettings.GetValue ( "cookie-inpact-store", "" );

				if ( _InpactStore.IndexOf ( "%" ) != -1 )
					{
					_InpactStore = System.Net.HttpUtility.UrlDecode ( _InpactStore );

					InpactStore = _InpactStore;
					}
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				return _InpactStore;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			set { StorageSettings.SetValue ( "cookie-inpact-store", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> LastPrefetch
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Obtiens ou définit la date du denrier chargement du Prefetch
		//-----------------------------------------------------------------------------------------------------------------------
		public static DateTime LastPrefetch
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "last-prefetch", DateTime.MinValue ); }
			set {        StorageSettings.SetValue ( "last-prefetch", value             ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> UseCompression
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique s'il faut compresser les échanges.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool UseCompression
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "use-compression", true  ); }
			set {        StorageSettings.SetValue ( "use-compression", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextInpact.Service"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
