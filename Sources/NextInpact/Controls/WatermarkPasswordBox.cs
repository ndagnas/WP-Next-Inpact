//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : WatermarkPasswordBox.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle WatermarkPasswordBox
// Créé le       : 22/01/2015
// Modifié le    : 22/01/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Controls;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextInpact.Controls"
//*******************************************************************************************************************************
namespace NextInpact.Controls
	{

	//  #   #   ###   ####   #   #         ####   #   #         ####    ###   #   #
	//  ## ##  #   #  #   #  #  #          #   #  #   #         #   #  #   #   # # 
	//  # # #  #####  ####   ###    #####  ####   #   #  #####  ####   #   #    #  
	//  #   #  #   #  #   #  #  #          #      # # #         #   #  #   #   # # 
	//  #   #  #   #  #   #  #   #         #       # #          ####    ###   #   #

	//***************************************************************************************************************************
	// Classe WatermarkPasswordBox
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit un PasswordBox avec texte en fond.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	[TemplateVisualState ( Name = "WatermarkFocused"      , GroupName = "WatermarkTextStates")]
	[TemplateVisualState ( Name = "WatermarkTextVisible"  , GroupName = "WatermarkTextStates")]
	[TemplateVisualState ( Name = "WatermarkTextCollapsed", GroupName = "WatermarkTextStates")]
	//---------------------------------------------------------------------------------------------------------------------------
	public class WatermarkPasswordBox : Control
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty RootBackgroundProperty;
		public static readonly DependencyProperty RootBorderBrushProperty;
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty PasswordProperty;
		public static readonly DependencyProperty WatermarkBackgroundProperty;
		public static readonly DependencyProperty WatermarkBorderBrushProperty;
		public static readonly DependencyProperty WatermarkForegroundProperty;
		public static readonly DependencyProperty WatermarkTextProperty;
		//-----------------------------------------------------------------------------------------------------------------------
		private                PasswordBox        PasswordBox;
		private                string             PasswordInternal;
		private                bool               IsFocused = false;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>WatermarkPasswordBox</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static WatermarkPasswordBox ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			RootBackgroundProperty       = DependencyProperty.Register ( "RootBackground"      , 
				typeof (Brush ), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.White ) ) );
			RootBorderBrushProperty      = DependencyProperty.Register ( "RootBorderBrush"     , 
				typeof (Brush ), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.White ) ) );
			//-------------------------------------------------------------------------------------------------------------------
			PasswordProperty             = DependencyProperty.Register ( "Password"            , 
				typeof (string), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( ""                                  , OnPasswordPropertyChanged ) );
			WatermarkBackgroundProperty  = DependencyProperty.Register ( "WatermarkBackground" , 
				typeof (Brush ), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.Black ), OnBrushPropertyChanged    ) );
			WatermarkBorderBrushProperty = DependencyProperty.Register ( "WatermarkBorderBrush", 
				typeof (Brush ), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.Black ), OnBrushPropertyChanged    ) );
			WatermarkForegroundProperty  = DependencyProperty.Register ( "WatermarkForeground" , 
				typeof (Brush ), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( new SolidColorBrush ( Colors.Black ), OnBrushPropertyChanged    ) );
			WatermarkTextProperty        = DependencyProperty.Register ( "WatermarkText"       , 
				typeof (string), typeof (WatermarkPasswordBox), new PropertyMetadata 
					( null                                                            ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>ApplicationButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public WatermarkPasswordBox () { this.DefaultStyleKey = typeof (WatermarkPasswordBox); }
		//***********************************************************************************************************************
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque qu'une des propriétés est modifiée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>DependencyPropertyChangedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void OnBrushPropertyChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			WatermarkPasswordBox Self = Sender as WatermarkPasswordBox;
			
			if ( Self != null ) Self.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque que la propriété <b>Password</b> est modifiée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>DependencyPropertyChangedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void OnPasswordPropertyChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			WatermarkPasswordBox Self = Sender as WatermarkPasswordBox;
			
			if ( Self != null ) Self.OnPasswordChanged ( Sender, Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque que la propriété <b>Password</b> de l'objet <b>PasswordBox</b> 
		/// est modifiée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnPasswordBoxPasswordChanged ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PasswordBox.Password != Password ) Password = this.PasswordBox.Password;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque que la propriété <b>Password</b> est modifiée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>DependencyPropertyChangedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnPasswordChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PasswordInternal == null )
				{
				this.PasswordInternal = Password;
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Password != this.PasswordBox.Password )
				{
				this.PasswordBox.Password = Password;

				this.ApplyVisualState ();
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PasswordChanged != null )
				this.PasswordChanged ( this, new RoutedEventArgs () );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le style selon l'état du composant.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ApplyVisualState ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.IsFocused && string.IsNullOrEmpty ( this.Password ) )
				{
				VisualStateManager.GoToState ( this, "WatermarkTextVisible"  , true );

				this.SetValue ( RootBackgroundProperty , this.GetValue ( WatermarkBackgroundProperty  ) );
				this.SetValue ( RootBorderBrushProperty, this.GetValue ( WatermarkBorderBrushProperty ) );
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( ! this.IsFocused )
				{
				VisualStateManager.GoToState ( this, "WatermarkTextCollapsed", true );

				this.SetValue ( RootBackgroundProperty , this.GetValue ( WatermarkBackgroundProperty  ) );
				this.SetValue ( RootBorderBrushProperty, this.GetValue ( WatermarkBorderBrushProperty ) );
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				VisualStateManager.GoToState ( this, "WatermarkTextCollapsed", true );

				this.SetValue ( RootBackgroundProperty , this.GetValue ( BackgroundProperty           ) );
				this.SetValue ( RootBorderBrushProperty, this.GetValue ( BorderBrushProperty          ) );
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// S'assure de l'application du template actuel.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public override void OnApplyTemplate ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnApplyTemplate ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.PasswordBox = this.GetTemplateChild ( "PasswordElement" ) as PasswordBox;

			this.PasswordBox.PasswordChanged += this.OnPasswordBoxPasswordChanged;

			if( ! string.IsNullOrEmpty ( this.PasswordInternal ) ) this.PasswordBox.Password = this.PasswordInternal;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque le contrôle reçoit le focus.
		/// </summary>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnGotFocus ( RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnGotFocus ( Args );

			this.IsFocused = true;

			this.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque le contrôle perd le focus.
		/// </summary>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnLostFocus ( RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnLostFocus ( Args );

			this.IsFocused = false;

			this.ApplyVisualState ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le mot de passe courant.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string Password
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( PasswordProperty ) as string; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( PasswordProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand le mot de passe change.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event RoutedEventHandler PasswordChanged;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la couleur de fond du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Brush WatermarkBackground
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkBackgroundProperty ) as Brush; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkBackgroundProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la couleur de la bordure du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Brush WatermarkBorderBrush
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkBorderBrushProperty ) as Brush; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkBorderBrushProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la couleur de police du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Brush WatermarkForeground
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkForegroundProperty ) as Brush; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkForegroundProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le texte du Watermark.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string WatermarkText
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.GetValue ( WatermarkTextProperty ) as string; }
			//-------------------------------------------------------------------------------------------------------------------
			set { this.SetValue ( WatermarkTextProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextInpact.Controls"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
